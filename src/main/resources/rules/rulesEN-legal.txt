# DATES ENGLISH
# Example to add "DATEPRP" as ner tag, and ISO code as the normalized tag for strings matching a color

# Case insensitive pattern matching (see java.util.regex.Pattern flags)

# Map variable names to annotation keys
 myNER = { type: "CLASS", value: "oeg.tagger.core.time.annotation.myNER$MyNamedEntityTagAnnotation" }
 myNUM = { type: "CLASS", value: "oeg.tagger.core.time.annotation.myNER$MyNumTagAnnotation" }
 myNERnormalized = { type: "CLASS", value: "oeg.tagger.core.time.annotation.myNER$MyNormalizedNamedEntityTagAnnotation" }
 myT = { type: "CLASS", value: "oeg.tagger.core.time.annotation.myNER$MyNamedEntityTagAnnotation" }
# myTnormalized = { type: "CLASS", value: "oeg.tagger.core.time.annotation.myNER$MyNormalizedNamedEntityTagAnnotation" }
 myTType = { type: "CLASS", value: "oeg.tagger.core.time.annotation.temporal$MyTypeTemporalAnnotation" }
 
myTValue = { type: "CLASS", value: "oeg.tagger.core.time.annotation.temporal$MyValueAnnotation" }

mySTValue = { type: "CLASS", value: "oeg.tagger.core.time.annotation.temporal$MyStringValueAnnotation" }

myRule = { type: "CLASS", value: "oeg.tagger.core.time.annotation.temporal$MyRuleAnnotation" }

 timexType = { type: "CLASS", value: "oeg.tagger.core.time.annotation.timex$Type" }
 timexValue = { type: "CLASS", value: "oeg.tagger.core.time.annotation.timex$Value" }
 timexFreq = { type: "CLASS", value: "oeg.tagger.core.time.annotation.timex$Freq" }
 timexMod = { type: "CLASS", value: "oeg.tagger.core.time.annotation.timex$Mod" }
 



ner = { type: "CLASS", value: "edu.stanford.nlp.ling.CoreAnnotations$NamedEntityTagAnnotation" }
normalized = { type: "CLASS", value: "edu.stanford.nlp.ling.CoreAnnotations$NormalizedNamedEntityTagAnnotation" }
tokens = { type: "CLASS", value: "edu.stanford.nlp.ling.CoreAnnotations$TokensAnnotation" }

# TIME

myTimeHour = { type: "CLASS", value: "oeg.tagger.core.time.annotation.time$MyHour" }

myTimeMinute = { type: "CLASS", value: "oeg.tagger.core.time.annotation.time$MyMinute" }

myTimeSecond = { type: "CLASS", value: "oeg.tagger.core.time.annotation.time$MySecond" }

myTimePartDay = { type: "CLASS", value: "oeg.tagger.core.time.annotation.time$MyPartDay" }

# DATE

myDateDay = { type: "CLASS", value: "oeg.tagger.core.time.annotation.date$MyDay" }

myDateMonth = { type: "CLASS", value: "oeg.tagger.core.time.annotation.date$MyMonth" }

myDateYear = { type: "CLASS", value: "oeg.tagger.core.time.annotation.date$MyYear" }

myDateDayWeek = { type: "CLASS", value: "oeg.tagger.core.time.annotation.date$MyDayWeek" }

myDateWeek = { type: "CLASS", value: "oeg.tagger.core.time.annotation.date$MyWeek" }


# Duration

myDurationWeek = { type: "CLASS", value: "oeg.tagger.core.time.annotation.duration$MyWeeks" }

myDurationHour = { type: "CLASS", value: "oeg.tagger.core.time.annotation.duration$MyHours" }

myDurationDay = { type: "CLASS", value: "oeg.tagger.core.time.annotation.duration$MyDays" }

myDurationMinute = { type: "CLASS", value: "oeg.tagger.core.time.annotation.duration$MyMinutes" }

myDurationSecond = { type: "CLASS", value: "oeg.tagger.core.time.annotation.duration$MySeconds" }

myDurationMonth = { type: "CLASS", value: "oeg.tagger.core.time.annotation.duration$MyMonths" }

myDurationYear = { type: "CLASS", value: "oeg.tagger.core.time.annotation.duration$MyYears" }

myDurationDecade = { type: "CLASS", value: "oeg.tagger.core.time.annotation.duration$MyDecades" }

myDurationDayWeek = { type: "CLASS", value: "oeg.tagger.core.time.annotation.duration$MyDayWeeks" }

myDurationWeekend = { type: "CLASS", value: "oeg.tagger.core.time.annotation.duration$MyWeekends" }

Period = { type: "CLASS", value: "oeg.tagger.core.time.annotation.duration$Period" }




mytokens = { type: "CLASS", value: "oeg.tagger.core.time.annotation.temporal$MyTokensAnnotation" } 	 	

#ENV.defaultResultAnnotationKey = ( type, value ) 
ENV.defaultNestedResultsAnnotationKey = mytokens 
#ENV.defaults["stage.limitIters"] = 0

#ENV.defaultResultAnnotationKey = (timexType, timexValue, timexFreq, timexQuant, myRule)
ENV.defaultResultAnnotationKey = (timexType, timexValue, timexFreq, timexMod, myRule)
ENV.defaults["stage"] = 1

# Create OR pattern of
#  regular expression over temporal expressions
$MONTHS = (
  [{lemma:/[J|j]anuary/}]     => 01 |
  [{lemma:/[F|f]ebruary/}]   => 02 |
  [{lemma:/[M|m]arch/}]    => 03 |
  [{lemma:/[A|a]pril/} & !{ pos:/PROPN.*/ }]   => 04 | #TODO: Check this...
  [{lemma:/[M|m]ay/} & !{pos:/((V.*)|(MD))/}]   => 05 |
  [{lemma:/[J|j]une/}]    => 06 |
  [{lemma:/[J|j]uly/} & !{ pos:/PROPN.*/ }]    => 07 | #TODO: Check this...
  [{lemma:/[A|a]ugust/}]    => 08 |
  [{lemma:/[S|s]eptember/}]    => 09 |
  [{lemma:/[O|o]ctober/}]    => 10 |
  [{lemma:/[N|n]ovember/}]    => 11 |
  [{lemma:/[D|d]ecember/}]    => 12
)

$WEEKL = (
  [{lemma:/[M|m]onday/}]     => 01 |
  [{lemma:/[T|t]uesday/}]   => 02 |
  [{lemma:/[W|w]ednesday/}]    => 03 |
  [{lemma:/[T|t]hursday/}]     => 04 |
  [{lemma:/[F|f]riday/}]   => 05 |
  [{lemma:/[S|s]aturday/}]    => 06 |
  [{lemma:/[S|s]unday/} & !{ pos:/PROPN.*/ }]    => 07
) 

$SEASON = (
  [{lemma:/fall|autumn/} && {pos:/NN.*/}]     => "FA" |
  [{lemma:/winter/} && {pos:/NN.*/}]   => "WI" |
  [{lemma:/spring/} && {pos:/NN.*/}]    => "SP" |
  [{lemma:/summer/} && {pos:/NN.*/}]     => "SU" 
)								  
$DAYMONTHN = (
  /01|1|1st/ => 01 |
  /02|2|2nd/   => 02 |
  /03|3|3rd/    => 03 |
  /04|4|4th/     => 04 |
  /05|5|5th/   => 05 |
  /06|6|6th/    => 06 |  
  /07|7|7th/    => 07 |
  /08|8|8th/     => 08 |
  /09|9|9th/   => 09 |
  /10|10th/   => 10 |
  /11|11th/   => 11 |
  /12|12th/   => 12 |
  /13|13th/   => 13 |
  /14|14th/   => 14 |
  /15|15th/   => 15 |
  /16|16th/   => 16 |
  /17|17th/   => 17 |
  /18|18th/   => 18 |
  /19|19th/   => 19 |
  /20|20th/   => 20 |
  /21|21st/   => 21 |
  /22|22nd/   => 22 |
  /23|23rd/   => 23 |
  /24|24th/   => 24 |
  /25|25th/   => 25 |
  /26|26th/   => 26 |
  /27|27th/   => 27 |
  /28|28th/   => 28 |
  /29|29th/   => 29 |
  /30|30th/   => 30 |
  /31|31st/   => 31
)

$MONTHN = (
  /01|1/ => 01 |
  /02|2/   => 02 |
  /03|3/    => 03 |
  /04|4/     => 04 |
  /05|5/   => 05 |
  /06|6/    => 06 |  
  /07|7/    => 07 |
  /08|8/     => 08 |
  /09|9/   => 09 |
  /10/   => 10 |
  /11/   => 11 |
  /12/   => 12
)

$ORDINALS = (
  [{lemma:/first|1st/}] => 01 |
  [{lemma:/second|2nd/}]   => 02 |
  [{lemma:/third|3rd/}]    => 03 |
  [{lemma:/forth|4th/}]     => 04 |
  [{lemma:/fifth|5th/}]   => 05 |
  [{lemma:/sixth|6th/}]    => 06 |  
  [{lemma:/seventh|7th/}]    => 07 |
  [{lemma:/eighth|8th/}]     => 08 |
  [{lemma:/ninth|9th/}]   => 09 |
  [{lemma:/tenth|10th/}]   => 10 |
  [{lemma:/eleventh|11th/}]   => 11 |
  [{lemma:/twelfth|12th/}]   => 12 |
  [{lemma:/thirteenth|13th/}]   => 13 |
  [{lemma:/fourteenth|14th/}]   => 14 |
  [{lemma:/fifteenth|15th/}]   => 15 |
  [{lemma:/sixteenth|16th/}]    => 16 |  
  [{lemma:/seventeenth|17th/}]    => 17 |
  [{lemma:/eighteenth|18th/}]     => 18 |
  [{lemma:/nineteenth|19th/}]   => 19 |
  [{lemma:/twentieth|20th/}]   => 20 |
  [{lemma:/twenty-first|21st/}] => 21 |
  [{lemma:/twenty-second|22nd/}]   => 22 |
  [{lemma:/twenty-third|23rd/}]    => 23 |
  [{lemma:/twenty-fourth|24th/}]     => 24 |
  [{lemma:/twenty-fifth|25th/}]   => 25 |
  [{lemma:/twenty-sixth|26th/}]    => 26 |  
  [{lemma:/twenty-seventh|27th/}]    => 27 |
  [{lemma:/twenty-eighth|28th/}]     => 28 |
  [{lemma:/twenty-ninth|29th/}]   => 29 |
  [{lemma:/thirtieth|30th/}]   => 30 |
  [{lemma:/thirty-first|31st/}]   => 31
)

DGRANULARITY_MAP = {
  "workday": "WORKDAY",
  "day" : "DAY",
  "days" : "DAY",

  "journey" : "DAY",
  "journeys" : "DAY",					
  "weekend"   : "WEEKEND",
  "week"    : "WEEK",
  "weeks"    : "WEEK",
  "fornight"     : "FORNIGHT",
  "fornights"     : "FORNIGHT",
  "month"   : "MONTH",
  "months"   : "MONTH",
  "bimester"    : "2_MONTH",  
  "bimesters"    : "2_MONTH",  
  "trimester"    : "3_MONTH",
  "trimesters"    : "3_MONTH",
#  "quarter"     : "3_MONTH",
#  "quarters"     : "3_MONTH",
  "semester"   : "6_MONTH",
  "semesters"   : "6_MONTH",
  "year"   : "YEAR",
  "years"   : "YEAR",					 
  "lustrum"   : "5_YEAR",
  "lustrums"   : "5_YEAR",
  "decade"   : "10_YEAR",
  "decades"   : "10_YEAR",
  "century"   : "100_YEAR",
  "centuries"   : "100_YEAR",
  "millennium"   : "1000_YEAR"
}
$DGranularity = CreateRegex(Keys(DGRANULARITY_MAP))



DURATION_MAP = {
  "WORKDAY" : "myDurationDay" ,  #ToChangeForCalculus
  "DAY" : "myDurationDay" ,
  "WEEKEND"   : "myDurationWeekend" ,
  "WEEK"    : "myDurationWeek" ,
  "FORNIGHT"     : "myDurationWeek" ,
  "MONTH"   : "myDurationMonth" ,
  "2_MONTH"    : "myDurationMonth" ,  
  "3_MONTH"    : "myDurationMonth" ,
  "4_MONTH"     : "myDurationMonth" ,
  "6_MONTH"   : "myDurationMonth" ,
  "YEAR"   : "myDurationYear" ,
  "2_YEAR"   : "myDurationYear" ,
  "3_YEAR"   : "myDurationYear" ,
  "5_YEAR"   : "myDurationYear" ,
  "10_YEAR"   : "myDurationYear" ,
  "100_YEAR"   : "myDurationDecade" ,
  "1000_YEAR"   : "myDurationYear",
  "HOUR"	: "myDurationHour",
  "MINUTE"	: "myDurationMinute",
  "SECOND"	: "myDurationSecond"
}

HALF_DURATION_MAP = {
  "WORKDAY" : "0.5BD",
  "DAY" : "0.5D" ,
  "WEEKEND"   : "0.5WE" ,
  "WEEK"    : "0.5W" ,
  "FORNIGHT"     : "1W" ,
  "MONTH"   : "0.5M" ,
  "2_MONTH"	: "1M",
  "3_MONTH"	: "0.5Q",
  "4_MONTH"	: "0.5T",
  "6_MONTH"	: "0.5HALF",
  "YEAR"   : "0.5Y" ,
  "2_YEAR"   : "1Y" ,
  "3_YEAR"   : "1.5Y" ,
  "5_YEAR"   : "2.5Y" ,
  "10_YEAR"   : "5Y" ,
  "100_YEAR"   : "50Y" ,
  "1000_YEAR"   : "500Y",
  "HOUR"	: "0.5H",
  "MINUTE"	: "0.5MIN",
  "SECOND"	: "0.5S"
}

QUARTER_DURATION_MAP = {
  "WORKDAY" : "0.25BD" , 
  "DAY" : "0.25D" ,
  "WEEKEND"   : "0.25WE" ,
  "WEEK"    : "0.25W" ,
  "FORNIGHT"     : "0.5W" ,
  "MONTH"   : "0.25M" ,
  "2_MONTH"	: "0.5M",
  "3_MONTH"	: "0.25Q",
  "4_MONTH"	: "0.25T",
  "6_MONTH"	: "0.25HALF",
  "YEAR"   : "0.25Y" ,
  "2_YEAR"   : "0.5Y" ,
  "3_YEAR"   : "0.75Y" ,
  "5_YEAR"   : "1.5Y" ,
  "10_YEAR"   : "2.5Y" ,
  "100_YEAR"   : "25Y" ,
  "1000_YEAR"   : "250Y",
  "HOUR"	: "0.25H",
  "MINUTE"	: "0.25MIN",
  "SECOND"	: "0.25S"
}

TQUARTER_DURATION_MAP = {
  "WORKDAY" : "0.75BD" ,
  "DAY" : "0.75D" ,
  "WEEKEND"   : "0.75WE" ,
  "WEEK"    : "0.75W" ,
  "FORNIGHT"     : "1.5W" ,
  "MONTH"   : "0.75M" ,
  "2_MONTH"	: "1.5M",
  "3_MONTH"	: "0.75Q",
  "4_MONTH"	: "0.75T",
  "6_MONTH"	: "0.75HALF",
  "YEAR"   : "0.75Y" ,
  "2_YEAR"   : "1.5Y" ,
  "3_YEAR"   : "2.25Y" ,
  "5_YEAR"   : "3.75Y" ,
  "10_YEAR"   : "7.5Y" ,
  "100_YEAR"   : "75Y" ,
  "1000_YEAR"   : "750Y",
  "HOUR"	: "0.75H",
  "MINUTE"	: "0.75MIN",
  "SECOND"	: "0.75S"
}

PERIODMENTE_MAP = {
  "daily" : "P1D",
  "weekly" : "P1W",
  "monthly"   : "P1M",
  "bimonthly"    : "P2M",
  "quarterly"    : "P3M",
  "semiannually"     : "P6M",
  "annually"     : "P1Y",
  "yearly"     : "P1Y",
  "biannually"     : "P2Y",
  "annual"     : "P1Y",
  "biannual"     : "P2Y"
}
$PeriodAdv = CreateRegex(Keys(PERIODMENTE_MAP))

HOURS_MENOS_MAP = {
  "one": "12",
  "two": "1",
  "three": "2",
  "four": "3",
  "five": "4",
  "six": "5",
  "seven": "6",
  "eigth": "7",
  "nine": "8",
  "ten": "9",
  "eleven": "10",
  "twelve": "11",
  "1": "12",
  "2": "1",
  "3": "2",
  "4": "3",
  "5": "4",
  "6": "5",
  "7": "6",
  "8": "7",
  "9": "8",
  "10": "9",
  "11": "10",
  "12": "11"
}
$Hoursmenosmap = CreateRegex(Keys(HOURS_MENOS_MAP))


MINUTES_MENOS_MAP = {
  "one": "59",
  "two": "58",
  "three": "57",
  "four": "56",
  "five": "55",
  "six": "54",
  "seven": "53",
  "eigth": "52",
  "nine": "51",
  "ten": "50",
  "eleven": "49",
  "twelve": "48",
  "thirteen": "47",
  "fourteen": "46",
  "fifteen": "45",
  "sixteen": "44",
  "seventeen": "43",
  "eighteen": "42",
  "nineteen": "41",
  "twenty": "40",
  "twenty-one": "39",
  "twenty-two": "38",
  "twenty-three": "37",
  "twenty-four": "36",
  "twenty-five": "35",
  "twenty-six": "34",
  "twenty-seven": "33",
  "twenty-eight": "32",
  "twenty-nine": "31",
  "1": "59",
  "2": "58",
  "3": "57",
  "4": "56",
  "5": "55",
  "6": "54",
  "7": "53",
  "8": "52",
  "9": "51",
  "10": "50",
  "11": "49",
  "12": "48",
  "13": "47",
  "14": "46",
  "15": "45",
  "16": "44",
  "17": "43",
  "18": "42",
  "19": "41",
  "20": "40",
  "21": "39",
  "22": "38",
  "23": "37",
  "24": "36",
  "25": "35",
  "26": "34",
  "27": "33",
  "28": "32",
  "29": "31"
}
$Minutesmenosmap = CreateRegex(Keys(MINUTES_MENOS_MAP))


HOURS_MAP = {
  "one": "1",
  "dos": "2",
  "three": "3",
  "four": "4",
  "five": "5",
  "six": "6",
  "seven": "7",
  "eight": "8",
  "nine": "9",
  "ten": "10",
  "eleven": "11",
  "twelve": "12",
  "1": "1",
  "2": "2",
  "3": "3",
  "4": "4",
  "5": "5",
  "6": "6",
  "7": "7",
  "8": "8",
  "9": "9",
  "10": "10",
  "11": "11",
  "12": "12"
}
$Hoursmap = CreateRegex(Keys(HOURS_MAP))

PARTDAY_MAP = {
  "morning" : "MO",
  "noon" : "MI",
  "midday" : "MI",
  "afternoon"   : "AF",
  "evening"    : "EV",
  "dawn"    : "EV",
  "night"    : "NI"
}
$PDGranularity = CreateRegex(Keys(PARTDAY_MAP))



DGRANULARITY_UNIT_MAP = {
  "WORKDAY" : "BD" ,
  "DAY" : "D" ,
  "WEEKEND"   : "WEEKEND" ,
  "WEEK"    : "W" ,
  "FORNIGHT"     : "D" ,
  "MONTH"   : "M" ,
  "2_MONTH"    : "M" ,  
  "3_MONTH"    : "Q" ,
  "4_MONTH"     : "T" ,
  "6_MONTH"   : "HALF" ,
  "YEAR"   : "Y" ,
  "2_YEAR"   : "Y" ,
  "3_YEAR"   : "Y" ,
  "5_YEAR"   : "Y" ,
  "10_YEAR"   : "Y" ,
  "100_YEAR"   : "Y" ,
  "1000_YEAR"   : "Y"
}

DGRANULARITY_AMOUNT_MAP = {
  "WORKDAY" : 1 ,
  "DAY" : 1 ,
  "WEEKEND"   : 2 ,
  "WEEK"    : 1 ,
  "FORNIGHT"     : 15 ,
  "MONTH"   : 1 ,
  "YEAR"   : 1 ,
  "2_MONTH"    : 2 ,  
  "3_MONTH"    : 3 ,
  "4_MONTH"     : 4 ,
  "6_MONTH"   : 6 ,
  "2_YEAR"   : 2 ,
  "3_YEAR"   : 3 ,
  "5_YEAR"   : 5 ,
  "10_YEAR"   : 10 ,
  "100_YEAR"   : 100  ,
  "1000_YEAR"   : 1000 
}



PERIOD_MAP = {
  "WORKDAY" : "P" ,
  "DAY" : "P" ,
  "WEEKEND"   : "P" ,
  "WEEK"    : "P" ,
  "FORNIGHT"     : "P" ,
  "MONTH"   : "P" ,
  "2_MONTH"    : "P" ,  
  "3_MONTH"    : "P" ,
  "4_MONTH"     : "P" ,
  "6_MONTH"   : "P" ,
  "YEAR"   : "P" ,
  "5_YEAR"   : "P" ,
  "10_YEAR"   : "P" ,
  "100_YEAR"   : "P" ,
  "1000_YEAR"   : "P",
  "SECOND"   : "PT",
  "MINUTE"   : "PT",
  "HOUR"   : "PT"
}

PMHOUR_MAP = {
  "1" : "13" ,
  "2"   : "14" ,
  "3"    : "15" ,
  "4"     : "16" ,
  "5"   : "17" ,
  "6"    : "18" ,  
  "7"    : "19" ,
  "8"     : "20" ,
  "9"   : "21" ,
  "10"   : "22" ,
  "11"   : "23" ,
  "12"   : "24" ,
  "13" : "13" ,
  "14"   : "14" ,
  "15"    : "15" ,
  "16"     : "16" ,
  "17"   : "17" ,
  "18"    : "18" ,  
  "19"    : "19" ,
  "20"     : "20" ,
  "21"   : "21" ,
  "22"   : "22" ,
  "23"   : "23" ,
  "0"   : "24"  
}


TGRANULARITY_MAP = {
  "second" : "SECOND",
  "seconds" : "SECOND",
  "minute" : "MINUTE",
  "minutes" : "MINUTE",
  "hour"   : "HOUR",
  "hours"   : "HOUR"
}
$TGranularity = CreateRegex(Keys(TGRANULARITY_MAP))

TGRANULARITY_UNIT_MAP = {
  "SECOND" : "S",
  "MINUTE" : "MIN",
  "HOUR"   : "H"
}

TGRANULARITY_AMOUNT_MAP = {  
  "SECOND" : 1,
  "MINUTE" : 1,
  "HOUR"   : 1
}

$YEARN = ( /[12]\d\d\d/ );



DECS_MAP = {
  "ten": 10,
  "twenty": 20,
  "thirty": 30,
  "forty": 40,
  "fifty": 50,
  "sixty": 60,
  "seventy": 70,
  "eighty": 80,
  "ninety": 90,
    "10": 10,
  "20": 20,
			   
		   
  "30": 30,
		   
  "40": 40,
		   
  "50": 50,
  "60": 60,
  "70": 70,
  "80": 80,
				
		   
				
		   
				
  "90": 90
}
$DECSDIG = CreateRegex(Keys(DECS_MAP))

UNS_MAP = {
  "a": 1,
  "one": 1,
  "two": 2,
  "three": 3,
  "four": 4,
  "five": 5,
  "six": 6,
  "seven": 7,
  "eight": 8,
  "nine": 9
}
$UNSDIG = CreateRegex(Keys(UNS_MAP))

SPECIALS_MAP = {
  "eleven": 11,
  "twelve": 12,
  "thirteen": 13,
  "fourteen": 14,
  "fifteen": 15,
  "sixteen": 16,
  "seventeen": 17,
  "eighteen": 18,
  "nineteen": 19
}

$SPECIALSDIG = CreateRegex(Keys(SPECIALS_MAP))

$ROMANS = (
  /I\.?/ =>  1 |
  /II\.?/ =>  2 |
  /III\.?/ =>  3 |
  /IV\.?/ =>  4 |
  /V\.?/ =>  5 |
  /VI\.?/ =>  6 |
  /VII\.?/ =>  7 |
  /VIII\.?/ =>  8 |
  /IX\.?/ =>  9 |
  /X\.?/ =>  10 |
  /XI\.?/ =>  11 |
  /XII\.?/ =>  12 |
  /XIII\.?/ =>  13 |
  /XIV\.?/ =>  14 |
  /XV\.?/ =>  15 |
  /XVI\.?/ =>  16 |
  /XVII\.?/ =>  17 |
  /XVIII\.?/ =>  18 |
  /XIX\.?/ =>  19 |
  /XX\.?/ =>  20 |
  /XXI\.?/ =>  21 |
  /XXII\.?/ =>  22 |
  /XXIII\.?/ =>  23 |
  /XXIV\.?/ =>  24 |
  /XXV\.?/ =>  25 |
  /XXVI\.?/ =>  26 |
  /XXVII\.?/ =>  27 |
  /XXVIII\.?/ =>  28 |
  /XXIX\.?/ =>  29 |
  /XXX\.?/ =>  30 

)		   
$DEICTIC2 = (
  /next/ => "+1" |
  /following/   => "+1" |
  /last/    => "-1" |
  /former/    => "-1" |
  /previous/     => "-1" |
  /preceding/   => "-1" |
  /later/    => "+1" |
  /before/   => "-1" |
  /after/    => "+1"
)





# Define ruleType to be over tokens
ENV.defaults["ruleType"] = "tokens"

#####################
# Basics (numbers)
#####################

{ ruleType:   "tokens",
    pattern: ( (/(\d+)/) ) ,
	matchWithResults: TRUE,
	action: ( Annotate($0, "myRule", "Rule$DNumber"), Annotate($0, "myNUM", "myNUMBER"), Annotate($0, "mySTValue", $1[0].lemma), Annotate($0, "myTValue", { type: "NUMBER", value: $$1.matchResults[0].word.group(1) }), Annotate($0, "myNERnormalized", :case{($1[0].lemma.length == 1) => Concat("0", $1[0].lemma), :else => $1[0].lemma}) ),
	stage : 1 }
	
	{ ruleType:   "tokens",
    pattern: ( [{lemma:/a/}]? [{lemma:"couple"}]  ) ,
						
	action: ( Annotate($0, "myRule", "Rule$parNumber"), Annotate($0, "myNUM", "myNUMBER"), Annotate($0, "mySTValue", "2"), Annotate($0, "myTValue", 2), Annotate($0, "myNERnormalized", "2") ),
	stage : 5 }

{ ruleType:   "tokens",
    pattern: ( $ROMANS ) ,
	action: ( Annotate($0, "myRule", "Rule$RomanNumber"), Annotate($0, "myNUM", "myRNUMBER"), Annotate($0, "mySTValue", Format("%d", $$0.value)), Annotate($0, "myTValue", $$0.value), Annotate($0, "myNERnormalized", Format("%d", Subtract($$0.value,1))) ),
	stage : 1 }

{ ruleType:   "tokens",
	matchWithResults: TRUE,
    pattern: ( [{lemma:/($DECSDIG)-($UNSDIG)/ }] ) ,
	action: ( Annotate($0, "myRule", "Rule$CompNum"), Annotate($0, "myNUM", "myNUMBER"), Annotate($0, "myTValue", Add(DECS_MAP[$$0.matchResults[0].lemma.group(1)], UNS_MAP[$$0.matchResults[0].lemma.group(2)])), Annotate($0, "mySTValue", Format("%d", $0[0].myTValue)), Annotate($0, "myNERnormalized", $0[0].mySTValue) ),
	stage : 1 }


# CHECK mirar que no se quede sola la y
# eg: mil cuatrocientos dieciseis
{ ruleType:   "tokens",
    pattern: ( 
		(
			(?$yearunsdig [{lemma:/$UNSDIG/}])? 
			(?$yeardig [{lemma:"thousand"} ]) 
			[{lemma:/and/}]?
		)? 
		(
			(?$hundunsdig [{lemma:/$UNSDIG/}])? 
			(?$centdig [{lemma:"hundred"} ] ) 
			[{lemma:/and/}]?
		)? 
		((?$decsdig [{lemma:/$DECSDIG/}]) | 
		(?$compsdig [{myRule:"Rule$CompNum"}]) | 
		(?$specialsdig [{lemma:/$SPECIALSDIG/}]) | 
		(?$unsdig [{lemma:/$UNSDIG/}]))?
	),
	action: ( :case{ ($0[0].lemma != "and") =>
	
	(Annotate($0, "myRule", "Rule$LONGNUMBER"), Annotate($0, "myNUM", "myNUMBER"), Annotate($0, "myTValue", Add( 
	:case { # We look at the Year digit
		($$yearunsdig == NIL && $$yeardig == NIL) => 0,
		($$yearunsdig == NIL && $$yeardig != NIL) => 1000 ,		
		($$yearunsdig != NIL && $$yeardig != NIL) => Multiply(UNS_MAP[$yearunsdig[0].lemma],1000) ,		
		:else => 0} , Add( #Special case, is a unit!
		:case {  # We look at the Century digit
			($$centdig == NIL ) => 0 ,
			($$hundunsdig != NIL && $$centdig != NIL) => Multiply(UNS_MAP[$hundunsdig[0].lemma], 100) ,
			:else => 100}, Add(
				:case { # We look at the Decade digit
					($$compsdig != NIL) => $compsdig[0].myTValue ,
					($$decsdig == NIL && $$specialsdig != NIL) => SPECIALS_MAP[$specialsdig[0].lemma] ,
					($$decsdig != NIL && $$specialsdig == NIL) => DECS_MAP[$decsdig[0].lemma] ,
					:else => 0},  
						:case {  # We look at the Unit digit
							($$unsdig == NIL ) => 0 ,
							:else => UNS_MAP[$unsdig[0].lemma]}
				)
			)
		)
	), Annotate($0, "mySTValue", Format("%d", $0[0].myTValue)), Annotate($0, "myNERnormalized", :case{($0[0].mySTValue.length == 1) => Concat("0", $0[0].mySTValue), :else => $0[0].mySTValue})
	 );}),
	stage : 4 }

{ ruleType:   "tokens",
  pattern: ( $ORDINALS ),
  action: ( Annotate($0, "myRule", "Rule$ORDINALS"), Annotate($0, "myNER", "ORDINAL"), Annotate($0, "myNERnormalized", Format("%02d", $$0.value)), Annotate($0, "mySTValue", Format("%d", $$0.value)), Annotate($0, "myTValue", $$0.value)) ,
  stage : 1  }					   
	
#####################
# Time-related basics (weekdays, months...)
#####################

{ ruleType:   "tokens",
  pattern: ( $SEASON ),
  action: ( Annotate($0, "myRule", "Rule$SEASON"), Annotate($0, "myNER", "SEASON"), Annotate($0, "myNERnormalized", Concat("-",$$0.value)), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue", Concat("XXXX-", $$0.value) )) ,
  stage : 1  }
  
{ ruleType:   "tokens",
  pattern: ( $MONTHS ),
  action: ( Annotate($0, "myRule", "Rule$MONTHS"), Annotate($0, "myNER", "MONTHS"), Annotate($0, "myNERnormalized", Format("%02d", $$0.value)), Annotate($0, "mySTValue", Format("%d", $$0.value)), Annotate($0, "myTValue", $$0.value), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue", Concat("XXXX-",Format("%02d", $$0.value)) )) ,
  stage : 1  } 
  
{ ruleType:   "tokens",
  pattern: ( [{lemma:"the"}]? [{lemma:"month"}] [{lemma:"of"}] ([{myNER:"MONTHS"}]) ),
  action: ( Annotate($0, "myRule", "Rule$MONTHS"), Annotate($0, "myNER", "MONTHS"), Annotate($0, "myNERnormalized", $1[0].myNERnormalized), Annotate($0, "mySTValue", $1[0].mySTValue), Annotate($0, "myTValue", $1[0].myTValue), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue", $1[0].timexValue )) ,
  stage : 2  }										   
  { ruleType:   "tokens",
  pattern: ( $WEEKL ),
  action: ( Annotate($0, "myRule", "Rule$WEEKL"), Annotate($0, "myNER", "WEEKDAY"), Annotate($0, "myNERnormalized", Format("%02d", $$0.value)), Annotate($0, "mySTValue", Format("%d", $$0.value) ), Annotate($0, "myTValue", $$0.value), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue", Concat("XXXX-WXX-", Format("%02d", $$0.value))) ) ,
  stage : 1  } 
  
{ ruleType:   "tokens",
  pattern: ( $DAYMONTHN ),
  action: ( Annotate($0, "myRule", "Rule$DAYMONTHN"), Annotate($0, "myNER", "DAYMONTH"), Annotate($0, "myNERnormalized", Format("%02d", $$0.value)), Annotate($0, "mySTValue", Format("%d", $$0.value) ), Annotate($0, "myTValue", $$0.value), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue", Format("%02d", $$0.value)) ) ,
  stage : 1  } 
  
{ ruleType:   "tokens",
  pattern: ( $MONTHN ),
  action: ( Annotate($0, "myRule", "Rule$MONTHN"), Annotate($0, "myNER", "MONTHN"), Annotate($0, "myNERnormalized", Format("%02d", $$0.value)) , Annotate($0, "mySTValue", Format("%d", $$0.value) ), Annotate($0, "myTValue", $$0.value), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue", Format("%02d", $$0.value)) ) ,
  stage : 1  } 
  
{ ruleType:   "tokens",
  pattern: ( $YEARN ),
  action: ( Annotate($0, "myRule", "Rule$YEARN"), Annotate($0, "myNER", "YEAR"), Annotate($0, "myNUM", "myNUMBER"), Annotate($0, "myNERnormalized", $$0.text), Annotate($0, "mySTValue", $$0.text) , Annotate($0, "myTValue", { type: "NUMBER", value: $$0.text }), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue", $$0.text) ) ,
  stage : 1  }


{ ruleType:   "tokens",
  pattern: ( [{lemma:/$UNSDIG/}  & !{word:/[Oo][Nn][Es][Ss]/}] ),
  action: ( Annotate($0, "myRule", "Rule$LetterNumber"), Annotate($0, "myNER", "myNUMBER"), Annotate($0, "myNUM", "myNUMBER"), Annotate($0, "mySTValue", Format("%d", UNS_MAP[$0[0].lemma])), Annotate($0, "myTValue", UNS_MAP[$0[0].lemma]), Annotate($0, "myNERnormalized", Format("%02d", UNS_MAP[$0[0].lemma])) ) ,
  stage : 1  }  


#####################
# Years with letters
#####################


# eg: en el año mil cuarenta y dos
{ ruleType:   "tokens",
    pattern: ( (?: [{lemma:"in"}] | [{lemma:"of"}] ) (?: [{lemma:"the"}]? [{lemma:"year"}]?) ([{myNUM:"myNUMBER"} && {mySTValue:/[12]\d\d\d/}]+ (?$AC ([{word:/[B|b]\.?[C|c]\.?/}] | ([{lemma:"before"}] [{lemma:/[C|c]hrist/}])))?) [!{pos:/NN.*/}]),#mirar este POS
	action: ( (Annotate($1, "myRule", "Rule$EnElAñoMyNumber"), Annotate($1, "myNER", "YEAR")), Annotate($1, "timexValue", Concat(:case{($$AC != NIL) => "BC", :else => ""}, Format("%04d", $year[0].myTValue))), Annotate($1, "myNERnormalized", $year[0].mySTValue), Annotate($1, "timexType", "DATE")),
	stage : 5 }	# Mejor como regla de filtrado lo de ZM (moneda), pero no va...
{ ruleType:   "tokens",
    pattern: ( (?: [{lemma:"in"}] | [{lemma:"of"}] ) (?: [{lemma:"the"}]? [{lemma:"year"}]?) ([{myNUM:"myNUMBER"} && {mySTValue:/[12]\d\d\d/}]+ (?$AC ([{word:/[A|a]\.?[C|c]\.?/}] | ([{lemma:"after"}] [{lemma:/[C|c]hrist/}])))?) [!{pos:/NN.*/}]),#mirar este POS
	action: ( (Annotate($1, "myRule", "Rule$EnElAñoMyNumber"), Annotate($1, "myNER", "YEAR")), Annotate($1, "timexValue", Format("%04d", $year[0].myTValue)), Annotate($1, "myNERnormalized", $year[0].mySTValue), Annotate($1, "timexType", "DATE")),
	stage : 5 }	# Mejor como regla de filtrado lo de ZM (moneda), pero no va...

# It adds its value as a myNERnormalized String to any number written with words	
#{ ruleType:   "tokens",
#    pattern: ( ([{myNUM:"myNUMBER"} & {myNERnormalized:NIL}]+) ),
#	action: ( Annotate($0, "myRule", "Rule$myNUMBER"), Annotate($$1, "myNERnormalized", $1[0].mySTValue)),
#	stage : 4 }



  


  

#####################
# Others
#####################

# eg: fin de semana / fines de semana
{ ruleType:   "tokens",
  pattern: ( [{lemma:"weekend"}] ),
  action: ( Annotate($0, "myRule", "Rule$FinDeSemana"), Annotate($0, "myNER", "DGRANULARITY"), Annotate($0, "myNERnormalized", DGRANULARITY_MAP["weekend"] ), Annotate($0, "myTType", "finsemana" ), Annotate($0, "timexType", "DURATION"), Annotate($0, "timexValue", Concat("1",DGRANULARITY_UNIT_MAP[DGRANULARITY_MAP["weekend"]])), Annotate($0, "Period", PERIOD_MAP["WEEKEND"]) ) ,
  stage : 1  }
  
  # eg: working day
{ ruleType:   "tokens",
  pattern: ( ([({lemma:"work"} & {pos:"VBG"}) | {lemma:"business"}] [{lemma:"day"}]) |  [{lemma:"weekday"}] |  [{lemma:"workday"}] ),
  action: ( Annotate($0, "myRule", "Rule$WorkDay"), Annotate($0, "myNER", "DGRANULARITY"), Annotate($0, "myNERnormalized", DGRANULARITY_MAP["workday"] ), Annotate($0, "myTType", "workday" ) ) ,
  stage : 1  }
  
  
  
  { ruleType:   "tokens",
  pattern: ( [{lemma:/$DGranularity/} & !{myNER:"DGRANULARITY"}  & {pos:"NNS"}] ),
#  pattern: ( [{lemma:/$DGranularity/} & !{myNER:"DGRANULARITY"}  & !{ pos:/NP.*/ } & {pos:/.*P.*/}] ),
#    pattern: ( [{lemma:/$DGranularity/} & !{myNER:"DGRANULARITY"}  & !{ pos:/NP.*/ } & !{pos:/.*s.*/}] ),

  action: ( Annotate($0, "myRule", "Rule$GranularityP"), Annotate($0, "myNER", "DGRANULARITY"), Annotate($0, "myNERnormalized", DGRANULARITY_MAP[$0[0].lemma] ), Annotate($0, "myTType", $$0.text ), Annotate($0, "timexType", "DURATION"), Annotate($0, "timexValue", Concat("X",DGRANULARITY_UNIT_MAP[DGRANULARITY_MAP[$0[0].lemma]])), Annotate($0, "Period", PERIOD_MAP[DGRANULARITY_MAP[$0[0].lemma]])  ) ,
																			   
  stage : 2  }
  

# eg: quarter of  
{ ruleType:   "tokens",
  pattern: ( ([{lemma:"three"} | {lemma:"3"}])? [{lemma:"quarter"} & !{myNER:"DGRANULARITY"}] [{lemma:"of"}]? [{lemma:"a"}]? [{lemma:"hour"}] ),
  action: ( Annotate($0, "myRule", "Rule$QuarterGranularity") , Annotate($0, "myNERnormalized", :case{($$1 == NIL) => "PT15M", :else => "PT45M"}), Annotate($0, "timexValue", $0[0].myNERnormalized), Annotate($0, "myTType", "quarter" ), Annotate($0, "timexType", "DURATION") ) ,
    result: ( "DURATION", Concat($0[1].timexValue,""), "", "", $0[0].myRule ) ,
	stage : 1  }
	
	# eg: and quarter  
# { ruleType:   "tokens",
#   pattern: ( [{lemma:/$DGranularity/}] [{lemma:"and"}] ([{lemma:"three"} | {lemma:"3"}])? [{lemma:"a"} | {lemma:"one"} | {lemma:"1"}]? [{lemma:"quarter"} & !{myNER:"DGRANULARITY"}] ),
#   action: ( Annotate($0, "myRule", "Rule$QuarterGranularity") , Annotate($0, "myNERnormalized", :case{($$1 == NIL) => "PT15M", :else => "PT45M"}), Annotate($0, "timexValue", $0[0].myNERnormalized), Annotate($0, "myTType", "quarter" ), Annotate($0, "timexType", "DURATION") ) ,
#     result: ( "DURATION", Concat($0[1].timexValue,""), "", "", $0[0].myRule ) ,
# 	stage : 1  }
	
{ ruleType:   "tokens",
  pattern: ( [{lemma:"half"}] [{lemma:"a"}] [{lemma:"hour"}] ),
  action: ( Annotate($0, "myRule", "Rule$halfHourGranularity") , Annotate($0, "myNERnormalized", "PT30M"), Annotate($0, "timexValue", $0[0].myNERnormalized), Annotate($0, "myTType", "half" ), Annotate($0, "timexType", "DURATION") ) ,
    result: ( "DURATION", Concat($0[1].timexValue,""), "", "", $0[0].myRule ) ,
	stage : 1  }
  
  
# eg: meses, dia...  
{ ruleType:   "tokens",
  pattern: ( [{lemma:/$DGranularity/} & !{myNER:"DGRANULARITY"} & !{myRule:"Rule$QuarterGranularity"} ] ),
  action: ( Annotate($0, "myRule", "Rule$Granularity"), Annotate($0, "myNER", "DGRANULARITY"), Annotate($0, "myNERnormalized", DGRANULARITY_MAP[$0[0].lemma] ), Annotate($0, "myTType", $$0.text ) ) , 
  stage : 2  }




#####################
# References
#####################

# eg: References to the present
{ ruleType:   "tokens",
  pattern: ([{lemma:"current"}] | ([{lemma:"right"} | {lemma:"just"}]? [{lemma:"now"}]) | ([{lemma:"this"}] [{word:"days"}]) | [{lemma:"nowadays"}]),
  action: ( Annotate($0, "myRule", "Rule$PresentRef"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue", "PRESENT_REF") )  ,
  stage : 1  }

  
# eg: References to the past (TODO: ese momento puede usarse en futuro, ver tiempos verbales...)
{ ruleType:   "tokens",
  pattern: (([{lemma:"in"}] [{lemma:"the"}] [{lemma:"past"}]) | ([{lemma:"back"}] [{lemma:"then"}]) | ([{lemma:"in"}] ([{lemma:"that"}]| [{lemma:"this"}] |[{lemma:"the"}]) ([{lemma:"moment"}]|[{lemma:"instant"}])) | ([{lemma:"formerly"}]) | ([{lemma:"yesteryear"}]) | ([{lemma:"aforetime"}]) | ([{lemma:"time"}]) ([{lemma:"ago"}]) | ([{lemma:"many"}])? ([{lemma:"year"}]) ([{lemma:"ago"}]) | ([{lemma:"once"}]) ([{lemma:"upon"}]) ([{lemma:"a"}]) ([{lemma:"time"}])),
  action: ( Annotate($0, "myRule", "Rule$PastRef"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue", "PAST_REF") )  ,
  stage : 1  }
  
# eg: References to the future (TODO: habria que meter "en unos + granularidad", ¿horas como?)
{ ruleType:   "tokens",
  action: ( Annotate($0, "myRule", "Rule$FutureRef"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue", "FUTURE_REF") )  ,
  pattern: (([{lemma:"in"}] [{lemma:"the"}] [{lemma:"future"}] (?:[!{pos:/NN.*/}]){0}) |  ([{lemma:"soon"}]) | ([{lemma:"in"}] (/some|SOME/| /a/ /few/) [{lemma:"year"}]) | ([{lemma:"in"}] /the/ /next|following/ /years|YEARS/) ),
  stage : 1  }

{ ruleType:   "tokens",
  pattern: (([{lemma:"night"}] [{lemma:"before"}] [{lemma:"last"}])),
  action: ( Annotate($0, "myRule", "Rule$antesdeanoche"), Annotate($0, "timexType", "TIME"), Annotate($0, "timexValue", "anchor(TODAY,-,2D)TNI"), Annotate($0, "myTimePartDay", "TNI") )  ,   result: ("TIME", "anchor(TODAY,-,2D)TNI", "", "", "Rule$antesdeanoche"),
  stage : 1  }
  
{ ruleType:   "tokens",
  pattern: ([{lemma:"last"}] [{lemma:"night"}]),
  action: ( Annotate($0, "myRule", "Rule$anoche"), Annotate($0, "timexType", "TIME"), Annotate($0, "timexValue", "anchor(TODAY,-,1D)TNI"), Annotate($0, "myTimePartDay", "TNI") )  ,  result: ("TIME", "anchor(TODAY,-,1D)TNI", "", "", "Rule$antesdeanoche"),
  stage : 1  }

  
#####################
# Anchored
#####################
 

# eg: Pasado mañana / pasado
{ ruleType:   "tokens",
  pattern: ((?:(([{lemma:"the"}] [{lemma:"day"}] [{lemma:"after"}] [{lemma:"tomorrow"}])))),
  action: ( Annotate($0, "myRule", "Rule$PasadoMañana"), Annotate($1, "timexType", "DATE"), Annotate($1, "timexValue", "anchor(TODAY,+,2D)"), Annotate($1, "myNERnormalized", "PASADO_MAÑANA") )  ,
  stage : 3  }

# eg: mañana
{ ruleType:   "tokens",
  pattern: ([{lemma:"tomorrow"}]),
  action: ( Annotate($0, "myRule", "Rule$Mañana"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue", "anchor(TODAY,+,1D)"), Annotate($0, "myNERnormalized", "MAÑANA") )  ,
  stage : 2  }
  
  # eg: mañana
{ ruleType:   "tokens",
  pattern: ([{lemma:"the"}] [{lemma:"day"}] [{lemma:"after"}] [{lemma:"tomorrow"}]),
  action: ( Annotate($0, "myRule", "Rule$Mañana"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue", "anchor(TODAY,+,2D)"), Annotate($0, "myNERnormalized", "PASADOMAÑANA") )  ,
			  
  
						 
																							 
																																																					  
			  
 
			  
						 
																	   
																 
			  
  
							
						 
																							 
																																																							
  stage : 2  }
  
# eg: hoy
{ ruleType:   "tokens",
  pattern: ([{lemma:"today"}]),
  action: ( Annotate($0, "myRule", "Rule$Hoy"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue", "anchor(TODAY,+,0D)"), Annotate($0, "myNERnormalized", "HOY") )  ,
  stage : 2  }
  
  
  
# eg: References to the present
{ ruleType:   "tokens",
  pattern: ([{lemma:"the"}] [{lemma:"day"}] [{lemma:"before"}] [{lemma:"yesterday"}]),
  action: ( Annotate($0, "myRule", "Rule$Anteayer"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue", "anchor(TODAY,-,2D)"), Annotate($0, "myNERnormalized", "ANTEAYER") )  ,
  stage : 2  }  

# eg: References to the present
{ ruleType:   "tokens",
  pattern: ([{lemma:"yesterday"}]),
  action: ( Annotate($0, "myRule", "Rule$ElAyer"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue", "anchor(TODAY,-,1D)"), Annotate($0, "myNERnormalized", "AYER") )  ,
  stage : 2  }  

  
  
  
#####################
# Parts of the day
#####################
 

# eg: Mañana, tarde (MODSTIME)
# String PDGranularityES = "(?:madrugada|mañana|tarde|tardenoche|noche)";
{ ruleType:   "tokens",
  pattern: ([{pos:/IN/}]? [{pos:/DT/}]?  ([{lemma:"early"}]? [{lemma:"morning"} |  {lemma:"morning"}  | {lemma:"afternoon"} | {lemma:"evening"} | {lemma:"noon"} | {lemma:"midday"}  | {lemma:"night"} & !{timexValue:/.+/}] )),
  action: ( Annotate($0, "myRule", "Rule$PARTDAY"), Annotate($0, "timexType", "TIME"), Annotate($0, "timexValue", PARTDAY_MAP[$1[0].lemma]), Annotate($0, "myNERnormalized", "PARTDAY"), Annotate($0, "myTimePartDay", $0[0].timexValue) )  ,
  result: ("TIME", Concat("anchor(TODAY,x,D)T",PARTDAY_MAP[$1[0].lemma]), "", "", "Rule$PARTDAY"),																																  
  stage : 4  }
  
  
#####################
# SETS
#####################
 

# eg: Mensualmente
# String periodAdvES = GranularityES+"mente";
{ ruleType:   "composite",
  pattern: ([{lemma:/$PeriodAdv/} && !{pos:/N.*/}]),
  action: ( Annotate($0, "myRule", "Rule$GranMente"), Annotate($0, "timexType", "SET"), Annotate($0, "timexValue", PERIODMENTE_MAP[$0[0].lemma]), Annotate($0, "myNERnormalized", "SET_MENTE") )  ,
  result: ("SET", PERIODMENTE_MAP[$0[0].lemma], "", "", "Rule$GranMente"),
  stage : 1  }
  
# eg: Dos días cada 2 meses
{ ruleType:   "composite",
  pattern: ((?$times [{timexType:"DURATION"}]+) (?: [!{timexType:"DURATION"} & ({lemma:"every"} | {lemma:"each"} | {lemma:"per"} | {lemma:"a"})]) (?$gran [{timexType:"DURATION"}]+)),
  action: ( Annotate($0, "myRule", "Rule$XGranCadaXGran"), Annotate($0, "timexType", "SET"),  Annotate($0, "timexFreq", $times[0].timexValue), Annotate($0, "timexValue", $gran[0].timexValue) )  ,
  result: ("SET", $times[0].timexValue, $times[0].timexFreq, "", "Rule$XGranCadaXGran"),
  stage : 17  }
  
# eg: Dos días cada semana
{ ruleType:   "composite",
  pattern: ((?$times [{timexType:"DURATION"}]+)  (?: [!{timexType:"DURATION"} & ({lemma:"every"} | {lemma:"each"} | {lemma:"per"} | {lemma:"a"})]) (?$gran [{myNER:"DGRANULARITY"}]+)),
  action: ( Annotate($0, "myRule", "Rule$XGranCadaGran"), Annotate($0, "timexType", "SET"),  Annotate($0, "timexFreq", $times[0].timexValue), Annotate($0, "timexValue", Concat(PERIOD_MAP[$gran[0].myNERnormalized],Format("%02d", DGRANULARITY_AMOUNT_MAP[$gran[0].myNERnormalized]),DGRANULARITY_UNIT_MAP[$gran[0].myNERnormalized])) )  ,
  result: ("SET", $times[0].timexValue, $times[0].timexFreq, "", "Rule$XGranCadaGran"),
  stage : 16  }
  
  
# eg: (Dos veces) cada 2 meses
{ ruleType:   "composite",
  pattern: ((?$times [{myNER:"TIMES"}]+)? (?: [!{timexType:"DURATION"} & ({lemma:"every"} | {lemma:"each"} | {lemma:"per"} | {lemma:"a"})]) (?$gran [{timexType:"DURATION"} & !{timexValue:/anchor.*/}]+)),
  action: ( Annotate($0, "myRule", "Rule$XVezCadaXGran"), Annotate($0, "timexType", "SET"),  Annotate($0, "timexFreq", :case{ ($$times != NIL) => $times[0].myNERnormalized, :else => ""} ), Annotate($0, "timexValue", $gran[0].timexValue) )  ,
    result: ("SET", $0[1].timexValue, $0[1].timexFreq, "", "Rule$XVezCadaXGran"),
  stage : 18  }
  
# eg: (Dos veces) cada/por semana
{ ruleType:   "composite",
  pattern: ((?$times [{myNER:"TIMES"}]+)? (?: [!{timexType:"DURATION"} & ({lemma:"every"} | {lemma:"each"} | {lemma:"per"} | {lemma:"a"})]) (?$gran [{myNER:"DGRANULARITY"} & !{timexValue:/anchor.*/}]+)),
  action: ( Annotate($0, "myRule", "Rule$XVezCadaGran"), Annotate($0, "timexType", "SET"), Annotate($0, "timexFreq", :case{ ($$times  != NIL) => $times[0].myNERnormalized, :else => ""} ) , Annotate($0, "timexValue", Concat(PERIOD_MAP[$gran[0].myNERnormalized],DGRANULARITY_AMOUNT_MAP[$gran[0].myNERnormalized],DGRANULARITY_UNIT_MAP[$gran[0].myNERnormalized])) )  ,
    result: ("SET", $0[1].timexValue, $0[1].timexFreq, "", "Rule$XVezCadaGran"),
  stage : 18  }
  
# eg: Todas las semanas
{ ruleType:   "composite",
  pattern: (( [{lemma:"all"} | {lemma:"every"}]) ([{myNER:"DGRANULARITY"}]+)),
  action: ( Annotate($0, "myRule", "Rule$TodGran"), Annotate($0, "timexType", "SET"), Annotate($0, "timexValue", Concat(PERIOD_MAP[$2[0].myNERnormalized],DGRANULARITY_AMOUNT_MAP[$2[0].myNERnormalized],DGRANULARITY_UNIT_MAP[$2[0].myNERnormalized])) )  ,
  stage : 18  }

  





  
  
#####################
# Indefs
#####################

# eg: varios, algunos...
{ ruleType:   "tokens",
  pattern: ( ([({pos:/(JJ|.?DT)/} & !{myNER:/(MOD.*|.+_Adj)/} & !{lemma:/\d.*/} & !{myNUM:"myNUMBER"}) | {lemma:/some|few|couple/}]+)), 
  action: ( Annotate($0, "myRule", "Rule$Indef"), Annotate($0, "myNER", "INDEF") )  ,
  stage : 10  }

# eg: proximo
{ ruleType:   "tokens",
  pattern: ( ([{pos:/(JJ|.?DT)/} & {lemma:/next|following|later|upcoming|after/}]+ | [{lemma:"to"}] [{lemma:/come/}]) ), 
  action: ( Annotate($0, "myRule", "Rule$FutureAdj"), Annotate($0, "myNER", "FUT_REF_Adj") )  ,
  stage : 9  }  
  
# eg: proximo
{ ruleType:   "tokens",
  pattern: ( ([{pos:/(JJ|.?DT)/} & {lemma:/previous|preceding|last|former|before/}]+) ), 
  action: ( Annotate($0, "myRule", "Rule$PastAdj"), Annotate($0, "myNER", "PAS_REF_Adj") )  ,
  stage : 9  }  
  
# eg: demostrativo
{ ruleType:   "tokens",
  pattern: ( [{pos:/(.?DT|JJ)/} & !{myNER:/.*_REF_Adj/} & !{lemma:/\d.*/} & !{myNER:/MOD.*/}]+), 
  action: ( Annotate($0, "myRule", "Rule$Dem"), Annotate($0, "myNER", "DEM") )  ,
  stage : 10  }

#    String deictic2DurES = "(?:[M|m]uch[a|o]s|[U|u]n par de|[U|u]n[o|a]s cuant[o|a]s|[A|a]lgun[a|o]s|([U|u]n[a|o]s #)?[P|p]oc[a|o]s)";
#    String deictic1ES = #"(?:[E|e]l|[L|l]a|[L|l]os|[L|l]as|[E|e]s[e|a]|[E|e]st[e|a]|[E|e]s[o|a]s|[E|e]st[o|a]s|[A|a]quell[o|a]s|[A|a]quel|[P|p]asad[o|a](s#)?|[F|f]utur[o|a](s)?)";

#     //COMMENT
# 	String deictic1DurES = "(?:[E|e]l|[L|l]a|[L|l]os|[L|l]as|[E|e]s[e|a]|[E|e]st[e|a]|[E|e]s[o|a]s|[E|e]st[o|a]s|[A|a]quell[o|a]s|[A|a]quel|[P|p]asad[o|a](s)?|[F|f]utur[o|a](s)?)";
#     String deictES = "(" + deictic1ES + "|" + deictic2ES + "|" + deictic1ES + " " + deictic2ES + ")";
#     String deictDurES = "(((en el transcurso de|durante) )?" + deictic1DurES + "|" + deictic2DurES + "|" + deictic1DurES + " " + deictic2DurES + ")";

 
  
  
#####################
# Complex dates
#####################  
  #     String longDateES = "(" + dayMonthNES + " de " + monthLES + "(?: (?:de )?" + yearNES + "))";
  # eg: dos dias
#{ ruleType:   "tokens",
#  pattern: ( [{lemma:"the"}]? [{lemma:"day"}]? ([{myNER:"DAYMONTH"} | {myNER:"MONTHN"}]) (?: [{lemma:"of"}] | [{lemma:"the"}]) [{lemma:"month"}]? [{lemma:"of"}]? ([{myNER:"MONTHS"}]) (?: [{lemma:"in"}] | [{lemma:"of"}] | /,/) [{lemma:"the"}]? [{lemma:"year"}]? ([{myNER:"YEAR"}])) ,
#  action: ( Annotate($0, "myRule", "Rule$DDdeMMdeYYYY"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue", Concat(:case{ ($$3 != NIL) => $3[0].myNERnormalized, :else => "XXXX"}, "-", :case{ ($$2 != NIL) => $2[0].myNERnormalized, :else => "XX"}, "-", :case{ ($$1 != NIL) => $1[0].myNERnormalized, :else => "XX"})) )  ,
#  stage : 11  }
  
  
#{ ruleType:   "tokens",
#  pattern: ( [{lemma:"the"}]? [{lemma:"month"}]? [{lemma:"of"}]? ([{myNER:"MONTHS"}]) (?: [{lemma:"in"}] | [{lemma:"of"}] | /,/) [{lemma:"the"}]? [{lemma:"year"}]?  ([{myNER:"YEAR"}])) ,
#  action: ( Annotate($0, "myRule", "Rule$MMdeYYYY"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue", Concat(:case{ ($$2 != NIL) => $2[0].myNERnormalized, :else => "XXXX"}, "-", :case{ ($$1 != NIL) => $1[0].myNERnormalized, :else => "XX"})) )  ,
#  stage : 10  }
    
  
 #TODO: check normalization eu/EEUU, each part...
{ ruleType:   "tokens",
matchWithResults: TRUE,
pattern: (/(0?[1-9]|1[0-9]|2[0-9]|3[0-1])[\/|-]([1-9]|1[0-2])[\/|-]([1-2]\d\d\d)/),
result: ("DATE", Concat($$0.matchResults[0].word.group(3), "-0", $$0.matchResults[0].word.group(2), "-", $$0.matchResults[0].word.group(1)), "", "","Rule$DD-MM-YYYY") }

{ ruleType:   "tokens",
matchWithResults: TRUE,
pattern: (/(0?[1-9]|1[0-9]|2[0-9]|3[0-1])[\/|-](0[1-9])[\/|-]([1-2]\d\d\d)/),
result: ("DATE", Concat($$0.matchResults[0].word.group(3), "-", $$0.matchResults[0].word.group(2), "-", $$0.matchResults[0].word.group(1)), "", "", "Rule$DD-MM-YYYY") }

{ ruleType:   "tokens",
matchWithResults: TRUE,
pattern: (/0?([1-9])[\/|-]0?([1-9])[\/|-]([1-2]\d\d\d)/),
result: ("DATE", Concat($$0.matchResults[0].word.group(3), "-0", $$0.matchResults[0].word.group(2), "-0", $$0.matchResults[0].word.group(1)), "", "","Rule$DD-MM-YYYY") }

{ ruleType:   "tokens",
matchWithResults: TRUE,
pattern: (/0?([1-9])[\/|-](1[0-2])[\/|-]([1-2]\d\d\d)/),
result: ("DATE", Concat($$0.matchResults[0].word.group(3), "-", $$0.matchResults[0].word.group(2), "-0", $$0.matchResults[0].word.group(1)), "", "","Rule$DD-MM-YYYY") }					   

# How to normalize?
{ ruleType:   "tokens",
matchWithResults: TRUE,
pattern: (/(1[0-9]|2[0-9]|3[0-1])[\/|-]0?([1-9])[\/|-](\d\d)/),
result: ("DATE", Concat("XX", $$0.matchResults[0].word.group(3), "-0", $$0.matchResults[0].word.group(2), "-", $$0.matchResults[0].word.group(1)), "", "", "Rule$DD-MM-YYYY") }

{ ruleType:   "tokens",
matchWithResults: TRUE,
pattern: (/(1[0-9]|2[0-9]|3[0-1])[\/|-](1[0-2])[\/|-](\d\d)/),
result: ("DATE", Concat("XX", $$0.matchResults[0].word.group(3), "-", $$0.matchResults[0].word.group(2), "-", $$0.matchResults[0].word.group(1)), "", "","Rule$DD-MM-YYYY") }

{ ruleType:   "tokens",
matchWithResults: TRUE,
pattern: (/0?([1-9])[\/|-]0?([1-9])[\/|-](\d\d)/),
result: ("DATE", Concat("XX", $$0.matchResults[0].word.group(3), "-0", $$0.matchResults[0].word.group(2), "-0", $$0.matchResults[0].word.group(1)), "", "","Rule$DD-MM-YYYY") }

{ ruleType:   "tokens",
matchWithResults: TRUE,
pattern: (/0?([1-9])[\/|-](1[0-2])[\/|-](\d\d)/),
result: ("DATE", Concat("XX", $$0.matchResults[0].word.group(3), "-", $$0.matchResults[0].word.group(2), "-0", $$0.matchResults[0].word.group(1)), "", "","Rule$DD-MM-YYYY") }




#####################
# Horas
##################### 


{ ruleType:   "tokens",
pattern: ([{word:/[Aa][Tt]/}]? ([{myNUM:"myNUMBER"} & {mySTValue:/([1-5][0-9])|[1-9]/}]) [{lemma:"to"}] ([{lemma:/$Hoursmap/}])),
action: ( Annotate($0, "myTType", "TIME"), Annotate($0, "timexValue", Concat("T", HOURS_MENOS_MAP[$2[0].lemma], ":", MINUTES_MENOS_MAP[$1[0].lemma]) ) , Annotate($0, "myRule", "Rule$12menos15"), Annotate($0, "myTimeHour", HOURS_MENOS_MAP[$2[0].lemma]), Annotate($0, "myTimeMinute", MINUTES_MENOS_MAP[$1[0].lemma]) )   ,
result: ("TIME", Concat("T", HOURS_MENOS_MAP[$2[0].lemma], ":", MINUTES_MENOS_MAP[$1[0].lemma]), "", "", "Rule$12menos15") }

{ ruleType:   "tokens",
pattern: (([{lemma:"quarter"}]) [{lemma:"past"}] [{lemma:/$Hoursmap/}]),
action: ( Annotate($0, "myTType", "TIME"), Annotate($0, "timexValue", Concat("T", HOURS_MENOS_MAP[$2[0].lemma], ":", MINUTES_MENOS_MAP[$1[0].lemma]) ) , Annotate($0, "myRule", "Rule$12ycuarto"), Annotate($0, "myTimeHour", $2[0].mySTValue), Annotate($0, "myTimeMinute", "15") )   ,
result: ("TIME", Concat("T", $2[0].mySTValue, ":15"), "", "", "Rule$12ycuarto") }

{ ruleType:   "tokens",
pattern: ( [{lemma:"half"}] [{lemma:"past"}] ([{lemma:/$Hoursmap/}])),
action: ( Annotate($0, "myTType", "TIME"), Annotate($0, "timexValue", Concat("T", HOURS_MENOS_MAP[$1[0].lemma], ":30") ) , Annotate($0, "myRule", "Rule$12ymedia"), Annotate($0, "myTimeHour", $1[0].mySTValue), Annotate($0, "myTimeMinute", "30") )   ,
result: ("TIME", Concat("T", $1[0].mySTValue, ":30"), "", "", "Rule$12ymedia") ,
 stage : 10  }  

{ ruleType:   "tokens",
pattern: ([{lemma:"quarter"}] [{lemma:"to"}] [{lemma:/$Hoursmap/}]),
action: ( Annotate($0, "myTType", "TIME"), Annotate($0, "timexType", "TIME"), Annotate($0, "timexValue", Concat("T", HOURS_MENOS_MAP[$1[0].lemma], ":45" ) ) , Annotate($0, "myRule", "Rule$12menoscuarto"), Annotate($0, "myTimeHour", HOURS_MENOS_MAP[$1[0].lemma]), Annotate($0, "myTimeMinute", "45") )   ,
result: ("TIME", Concat("T", HOURS_MENOS_MAP[$1[0].lemma], ":45" ), "", "", "Rule$12menoscuarto") ,
 stage : 10  }

{ ruleType:   "tokens",
pattern: ( ([{myNUM:"myNUMBER"} & {mySTValue:/([1-5][0-9])|[1-9]/}]) [{lemma:"past"}] ([{lemma:/$Hoursmap/}]) ),
action: ( Annotate($0, "myTType", "TIME"), Annotate($0, "timexType", "TIME"), Annotate($0, "timexValue", Concat("T", HOURS_MENOS_MAP[$2[0].lemma], ":", MINUTES_MENOS_MAP[$1[0].lemma]) ) , Annotate($0, "myRule", "Rule$12y15"), Annotate($0, "myTimeHour", $2[0].mySTValue), Annotate($0, "myTimeMinute", $1[0].mySTValue) )   ,
result: ("TIME", Concat("T", $2[0].mySTValue, ":", $1[0].mySTValue), "", "", "Rule$12y15") ,
 stage : 10  }

{ ruleType:   "tokens",
matchWithResults: TRUE,
pattern: (/([1-9]|1[0-2])/ (/[P|p][M|m][.,\/#!$%\^&\*;:{}=\-_`~()”“"…]?/)),
action: ( Annotate($0, "myTType", "TIME"), Annotate($0, "timexValue", Concat("T", PMHOUR_MAP[$$0.matchResults[0].word.group(1)], ":00") ), Annotate($0, "myTimeHour", PMHOUR_MAP[$$0.matchResults[0].word.group(1)]), Annotate($0, "myTimeMinute", "00") ),
result: ("TIME", Concat("T", PMHOUR_MAP[$$0.matchResults[0].word.group(1)], ":00"), "", "", "Rule$1_pm") ,
 stage : 10  }

{ ruleType:   "tokens",
matchWithResults: TRUE,
pattern: (/([1-9]|1[0-2])/ (/[A|a][M|m][.,\/#!$%\^&\*;:{}=\-_`~()”“"…]?/)),
action: ( Annotate($0, "myTType", "TIME"), Annotate($0, "timexValue", Concat("T", $$0.matchResults[0].word.group(1), ":00") ), Annotate($0, "myTimeHour", PMHOUR_MAP[$$0.matchResults[0].word.group(1)]), Annotate($0, "myTimeMinute", "00") ),
result: ("TIME", Concat("T", $$0.matchResults[0].word.group(1), ":00"), "", "", "Rule$1_am") ,
 stage : 10  }

{ ruleType:   "tokens",
matchWithResults: TRUE,
pattern: (/([1-9]|1[0-2])[P|p][M|m][.,\/#!$%\^&\*;:{}=\-_`~()”“"…]?/),
action: ( Annotate($0, "myTType", "TIME"), Annotate($0, "timexValue", Concat("T", PMHOUR_MAP[$$0.matchResults[0].word.group(1)], ":00") ), Annotate($0, "myTimeHour", PMHOUR_MAP[$$0.matchResults[0].word.group(1)]), Annotate($0, "myTimeMinute", "00") ),
result: ("TIME", Concat("T", PMHOUR_MAP[$$0.matchResults[0].word.group(1)], ":00"), "", "", "Rule$1pm") ,
 stage : 10  }

{ ruleType:   "tokens",
matchWithResults: TRUE,
pattern: (/([1-9]|1[0-2])[A|a][M|m][.,\/#!$%\^&\*;:{}=\-_`~()”“"…]?/),
action: ( Annotate($0, "myTType", "TIME"), Annotate($0, "timexValue", Concat("T", $$0.matchResults[0].word.group(1), ":00") ), Annotate($0, "myTimeHour", $$0.matchResults[0].word.group(1)), Annotate($0, "myTimeMinute", "00") ),
result: ("TIME", Concat("T", $$0.matchResults[0].word.group(1), ":00"), "", "", "Rule$1am") ,
 stage : 10  }
  
{ ruleType:   "tokens",
matchWithResults: TRUE,
pattern: (/(0?[0-9]|1[0-9]|2[0-4]):([0-5][0-9])[.,\/#!$%\^&\*;:{}=\-_`~()”“"…]?/),
action: ( Annotate($0, "myTType", "TIME"), Annotate($0, "timexValue", Concat("T", $$0.matchResults[0].word.group(1),":", $$0.matchResults[0].word.group(2)) ), Annotate($0, "myTimeHour", $$0.matchResults[0].word.group(1)), Annotate($0, "myTimeMinute", $$0.matchResults[0].word.group(2))),
result: ("TIME", Concat("T", $$0.matchResults[0].word.group(1),":", $$0.matchResults[0].word.group(2)), "", "", "Rule$1:30") ,
 stage : 10  }

{ ruleType:   "tokens",
matchWithResults: TRUE,
pattern: (/(0?[0-9]|1[0-9]|2[0-4])\.([0-5][0-9])[.,\/#!$%\^&\*;:{}=\-_`~()”“"…]?/),
action: ( Annotate($0, "myTType", "TIME"), Annotate($0, "timexValue", Concat("T", $$0.matchResults[0].word.group(1),":", $$0.matchResults[0].word.group(2)) ), Annotate($0, "myTimeHour", $$0.matchResults[0].word.group(1)), Annotate($0, "myTimeMinute", $$0.matchResults[0].word.group(2))),
result: ("TIME", Concat("T", $$0.matchResults[0].word.group(1),":", $$0.matchResults[0].word.group(2)), "", "", "Rule$1.30") ,
 stage : 10  }

{ ruleType:   "tokens",
matchWithResults: TRUE,
pattern: (/(0?[0-9]|1[0-9]|2[0-4])[H|h]([0-5][0-9])?[.,\/#!$%\^&\*;:{}=\-_`~()”“"…]?/),
action: ( Annotate($0, "myTType", "TIME"), Annotate($0, "timexValue", Concat("T", $$0.matchResults[0].word.group(1),":", :case{($$0.matchResults[0].word.group(2) != NIL) => $$0.matchResults[0].word.group(2), :else => "00" }) ), Annotate($0, "myTimeHour", $$0.matchResults[0].word.group(1)), Annotate($0, "myTimeMinute", :case{($$0.matchResults[0].word.group(2) != NIL) => $$0.matchResults[0].word.group(2), :else => "00" })),
result: ("TIME", Concat("T", $$0.matchResults[0].word.group(1),":", :case{($$0.matchResults[0].word.group(2) != NIL) => $$0.matchResults[0].word.group(2), :else => "00" }), "", "", "Rule$1h30")  ,
 stage : 10  }

{ ruleType:   "tokens",
matchWithResults: TRUE,
pattern: (/(0?[0-9]|1[0-9]|2[0-4])[H|h]([0-5][0-9])?[.,\/#!$%\^&\*;:{}=\-_`~()”“"…]?/),
action: ( Annotate($0, "myTType", "TIME"), Annotate($0, "timexValue", Concat("T", $$0.matchResults[0].word.group(1),":", :case{($$0.matchResults[0].word.group(2) != NIL) => $$0.matchResults[0].word.group(2), :else => "00" }), Annotate($0, "myTimeHour", $$0.matchResults[0].word.group(1)), Annotate($0, "myTimeMinute", :case{($$0.matchResults[0].word.group(2) != NIL) => $$0.matchResults[0].word.group(2), :else => "00" }) ) ),
result: ("TIME", Concat("T", $$0.matchResults[0].word.group(1),":", :case{($$0.matchResults[0].word.group(2) != NIL) => $$0.matchResults[0].word.group(2), :else => "00" }), "", "", "Rule$1h30")  ,
 stage : 10  }

{ ruleType:   "tokens",
pattern: ((/[1-9]|1[0-2]/) (?: [{lemma:"in"}] | [{lemma:"at"}] | [{lemma:"of"}])? [{pos:/JJ*/} | {pos:/DT/}]* ([{myNERnormalized:"PARTDAY"}])+),
action: ( Annotate($0, "myTType", "TIME"), Annotate($0, "timexValue", Concat("T", :case{($2[0].timexValue == "AF") => PMHOUR_MAP[$1[0].lemma], :else => :case{($2[0].timexValue == "NI") => PMHOUR_MAP[$1[0].lemma], :else => :case{($2[0].timexValue == "EV") => PMHOUR_MAP[$1[0].lemma], :else => :case{($2[0].timexValue == "MI") => :case{($1[0].lemma != "12") => PMHOUR_MAP[$1[0].lemma], :else => $1[0].lemma }, :else => $1[0].lemma } } } }, ":00"), Annotate($0, "myTimeHour", :case{($2[0].timexValue == "AF") => PMHOUR_MAP[$1[0].lemma], :else => :case{($2[0].timexValue == "NI") => PMHOUR_MAP[$1[0].lemma], :else => :case{($2[0].timexValue == "EV") => PMHOUR_MAP[$1[0].lemma], :else => :case{($2[0].timexValue == "MI") => :case{($1[0].lemma != "12") => PMHOUR_MAP[$1[0].lemma], :else => $1[0].lemma }, :else => $1[0].lemma } } } }), Annotate($0, "myTimeMinute", "00") ) ),
result: ("TIME", Concat("T", :case{($2[0].timexValue == "AF") => PMHOUR_MAP[$1[0].lemma], :else => :case{($2[0].timexValue == "NI") => PMHOUR_MAP[$1[0].lemma], :else => :case{($2[0].timexValue == "EV") => PMHOUR_MAP[$1[0].lemma], :else => :case{($2[0].timexValue == "MI") => :case{($1[0].lemma != "12") => PMHOUR_MAP[$1[0].lemma], :else => $1[0].lemma }, :else => $1[0].lemma } } } }, ":00"), "", "", "Rule$3delatarde") ,
 stage : 10  }

{ ruleType:   "tokens",
matchedExpressionGroup: 1,
pattern: ( [{lemma:"at"}] (/[1-9]|1[0-2]/) [{lemma:"o'clock"}]?), # [!{pos:/NN.*/}]),
action: ( Annotate($0, "myTType", "TIME"), Annotate($0, "timexValue", Concat("T", $1[0].lemma, ":00"), Annotate($0, "myTimeHour", $1[0].lemma), Annotate($0, "myTimeMinute", "00") ) ),
result: ("TIME", Concat("T", $1[0].lemma , ":00"), "", "", "Rule$las3") ,
 stage : 9  } 

{ ruleType:   "tokens",
matchedExpressionGroup: 1,
pattern: ( [{lemma:"at"}] ([{myNUM:"myNUMBER"} & {mySTValue:/[1-9]|1[0-2]/}])  [{lemma:"o'clock"}]?), # & !{pos:DN0CP0}]) [!{pos:"NCFP000"}]),
action: ( Annotate($0, "myTType", "TIME"), Annotate($0, "timexValue", Concat("T", $1[0].mySTValue, ":00"), Annotate($0, "myTimeHour", $1[0].mySTValue), Annotate($0, "myTimeMinute", "00") ) ),
result: ("TIME", Concat("T", $1[0].mySTValue , ":00"), "", "", "Rule$las3") ,
 stage : 9  } 

{ ruleType:   "tokens",
pattern: ( [{word:/[aA][tT]?/}]  ([{myTType:"TIME"}]+) (?: [{lemma:"of"}] | [{lemma:"in"}] | [{lemma:"at"}])? [{pos:/JJ.*/} | {pos:/DT.*/}]* (?$pday [{myNERnormalized:"PARTDAY"}])+),
action: ( Annotate($0, "myRule", "Rule$3:20delatarde"), Annotate($0, "myTType", "TIME"), Annotate($0, "timexType", "TIME"), Annotate($0, "myTimeHour", :case{($pday[0].timexValue == "AF") => PMHOUR_MAP[$time[0].myTimeHour], :else => :case{($pday[0].timexValue == "NI") => PMHOUR_MAP[$time[0].myTimeHour], :else => :case{($pday[0].timexValue == "EV") => PMHOUR_MAP[$time[0].myTimeHour], :else => :case{($pday[0].timexValue == "MI") => :case{($pday[0].myTimeHour != "12") => PMHOUR_MAP[$time[0].myTimeHour], :else => $1[0].mySTValue }, :else => $time[0].myTimeHour } } } }), Annotate($0, "myTimeMinute", $time[0].myTimeMinute), Annotate($0, "myTimePartDay", $pday[0].timexValue) , Annotate($0, "timexValue", Concat("T", :case{($pday[0].timexValue == "AF") => PMHOUR_MAP[$time[0].myTimeHour], :else => :case{($pday[0].timexValue == "NI") => PMHOUR_MAP[$time[0].myTimeHour], :else => :case{($pday[0].timexValue == "EV") => PMHOUR_MAP[$time[0].myTimeHour], :else => :case{($pday[0].timexValue == "MI") => :case{($pday[0].myTimeHour != "12") => PMHOUR_MAP[$time[0].myTimeHour], :else => $1[0].mySTValue }, :else => $time[0].myTimeHour } } } }, ":", $time[0].myTimeMinute)) ),
result: ("TIME", Concat("T", :case{($pday[0].timexValue == "AF") => PMHOUR_MAP[$time[0].myTimeHour], :else => :case{($pday[0].timexValue == "NI") => PMHOUR_MAP[$time[0].myTimeHour], :else => :case{($pday[0].timexValue == "EV") => PMHOUR_MAP[$time[0].myTimeHour], :else => :case{($pday[0].timexValue == "MI") => :case{($pday[0].myTimeHour != "12") => PMHOUR_MAP[$time[0].myTimeHour], :else => $1[0].mySTValue }, :else => $time[0].myTimeHour } } } }, ":", $time[0].myTimeMinute), "", "", "Rule$3:20delatarde") ,
 stage : 11  }

{ ruleType:   "tokens",
pattern: ( ([{myNUM:"myNUMBER"} & {mySTValue:/[1-9]|1[0-2]/} & !{pos:/NN.*/}] ) (?: [{lemma:"of"}] | [{lemma:"in"}] | [{lemma:"at"}])? [{pos:/JJ.*/} | {pos:/DT.*/}]* ([{myNERnormalized:"PARTDAY"}])+),
action: (Annotate($0, "timexType", "TIME"), Annotate($0, "myTimeHour", :case{($2[0].timexValue == "AF") => PMHOUR_MAP[$1[0].mySTValue], :else => :case{($2[0].timexValue == "NI") => PMHOUR_MAP[$1[0].mySTValue], :else => :case{($2[0].timexValue == "EV") => PMHOUR_MAP[$1[0].mySTValue], :else => :case{($2[0].timexValue == "MI") => :case{($1[0].mySTValue != "12") => PMHOUR_MAP[$1[0].mySTValue], :else => $1[0].mySTValue }, :else => $1[0].mySTValue } } } }), Annotate($0, "myTimeMinute", "00"), Annotate($0, "myTimePartDay", $2[0].timexValue)),
result: ("TIME", Concat("T", :case{($2[0].timexValue == "AF") => PMHOUR_MAP[$1[0].mySTValue], :else => :case{($2[0].timexValue == "NI") => PMHOUR_MAP[$1[0].mySTValue], :else => :case{($2[0].timexValue == "EV") => PMHOUR_MAP[$1[0].mySTValue], :else => :case{($2[0].timexValue == "MI") => :case{($1[0].mySTValue != "12") => PMHOUR_MAP[$1[0].mySTValue], :else => $1[0].mySTValue }, :else => $1[0].mySTValue } } } }, ":00"), "", "", "Rule$tresdelatarde"),
 stage : 8  }
  
#composite:

#####################
# Number + TGranularity
#####################

# eg: horas
{ ruleType:   "tokens",
  pattern: ( [(/$TGranularity/ & {pos:/NN.*/})] ), # To avoid confusion with second (time measure unit and ordinal)
  action: ( Annotate($0, "myRule", "Rule$TGranularity"), Annotate($0, "myNER", "TGRANULARITY"), Annotate($0, "myNERnormalized", TGRANULARITY_MAP[$0[0].lemma] ), Annotate($0, "myTType", $$0.text ), Annotate($0, "timexType", "DURATION"), Annotate($0, "timexValue", Concat("X",TGRANULARITY_UNIT_MAP[TGRANULARITY_MAP[$0[0].lemma]])), Annotate($0, "Period", PERIOD_MAP[TGRANULARITY_MAP[$0[0].lemma]] )) ,
  stage : 2  }

# eg: dos horas y media/cuarto
{ ruleType:   "tokens",
  pattern: ( ([{myNUM:"myNUMBER"}]+) (?$plus [{lemma:"and"}] [{lemma:"a"}]? (?$added [{lemma:"half"} | {lemma:/quarter/}] || ([{lemma:"three"} | {lemma:"3"}] [{lemma:"quarter"}])))? (?$gran [{myNER:"TGRANULARITY"}]) ),
  action: ( Annotate($0, "myRule", "Rule$NUMhalfTGranularity"), Annotate($0, "timexType", "DURATION"), Annotate($0, "timexValue",  Concat($1[0].mySTValue, TGRANULARITY_UNIT_MAP[$gran[0].myNERnormalized], :case{($plus != NIL) => :case{($added[0].lemma == "half") => HALF_DURATION_MAP[$gran[0].myNERnormalized], ($added[0].lemma == "quarter") => QUARTER_DURATION_MAP[$gran[0].myNERnormalized], :else => TQUARTER_DURATION_MAP[$gran[0].myNERnormalized]}, :else => ""})), Annotate($0, DURATION_MAP[$gran[0].myNERnormalized], $gran[0].timexValue), Annotate($0, "Period", PERIOD_MAP[$gran[0].myNERnormalized]) ) , 
  stage : 15  }
  
# eg: dos horas y media/cuarto
{ ruleType:   "tokens",
  pattern: ( ([{myNUM:"myNUMBER"}]+) (?$gran [{myNER:"TGRANULARITY"}]) (?$plus [{lemma:"and"}] [{lemma:"a"}]? (?$added [{lemma:"half"} | {lemma:/quarter/}] || ([{lemma:"three"} | {lemma:"3"}] [{lemma:"quarter"}])))? ),
  action: ( Annotate($0, "myRule", "Rule$NUMTGranularityhalf"), Annotate($0, "timexType", "DURATION"), Annotate($0, "timexValue",  Concat($1[0].mySTValue, TGRANULARITY_UNIT_MAP[$gran[0].myNERnormalized], :case{($plus != NIL) => :case{($added[0].lemma == "half") => HALF_DURATION_MAP[$gran[0].myNERnormalized], ($added[0].lemma == "quarter") => QUARTER_DURATION_MAP[$gran[0].myNERnormalized], :else => TQUARTER_DURATION_MAP[$gran[0].myNERnormalized]}, :else => ""})), Annotate($0, DURATION_MAP[$gran[0].myNERnormalized], $gran[0].timexValue), Annotate($0, "Period", PERIOD_MAP[$gran[0].myNERnormalized]) ) , 
  stage : 15  }
 
  
 # eg: varias/algunas horas
{ ruleType:   "tokens",
  pattern: ( ([{myNER:"INDEF"}]+) ([{myNER:"TGRANULARITY"}]) ),
  action: ( Annotate($0, "myRule", "Rule$INDEFTGranularity"), Annotate($0, "timexType", "DURATION"), Annotate($0, "timexValue",  Concat("X", TGRANULARITY_UNIT_MAP[$2[0].myNERnormalized])), Annotate($0, DURATION_MAP[$2[0].myNERnormalized], $2[0].timexValue), Annotate($0, "Period", "PT" )) , 
  stage : 15  }
  
 # eg: las próximas horas/decadas (indef)
{ ruleType:   "tokens",
  pattern: ( ([{myNER:"FUT_REF_Adj"} & {pos:/(JJ.*|DT)/}]+) (?$gran [{myNER:"[TD]GRANULARITY"}]) ),
  action: ( Annotate($0, "myRule", "Rule$proximasGranularity"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue",  Concat("anchor(TODAY,-,",DGRANULARITY_UNIT_MAP[$gran[0].myNERnormalized],")") ) ),  
  stage : 15  }
  

{ ruleType:   "tokens",
  pattern: ( (?$total (?$rel [({pos:/(JJ.*|.?DT)/}) & !{lemma:"a"} & !{myNER:/.+_Adj/} & !{myNER:"INDEF"}] [({pos:/(JJ.*|.?DT)/}) & !{lemma:"a"} & !{myNER:/.+_Adj/} & !{myNER:"INDEF"}]*) (?$gran [{myNER:"DGRANULARITY"} & !{pos:"NNS"} & !{timexType:"SET"} & !{myNERnormalized:/1000?_YEAR/} & !{pos:/.+P.+/}]+)) [!{myNER:"DAYMONTH"} & !{myNER:"MONTHN"} & !{myNUM:/my[R]?NUMBER/} & !{myNER:/.+_Adj/}]),
  action: ( Annotate($total, "myRule", "Rule$este"), Annotate($total, "timexType", "DATE"), Annotate($total, "timexValue", Concat("anchor(TODAY,x,", DGRANULARITY_UNIT_MAP[$gran[0].myNERnormalized],")")), Annotate($total, "Period", $gran[0].Period)  
   )  ,
  stage : 20  }
  
	{ ruleType:   "tokens",
  pattern: ( (?$rel [{pos:/(JJ.*|.?DT)/}] [{pos:/(JJ.*|.?DT)/}]*)? (?$num [{myNER:"DAYMONTH"} | {myNUM:"myNUMBER"} | {myNER:"ORDINAL"}]+) (?$gran [{lemma:"century"} & !{timexType:"DURATION"}]+) (?$AC ([{word:/[Bb]\.?[C|c]\.?/}] | ([{lemma:"before"}] [{lemma:/[C|c]hrist/}])))? (?$dc ([{word:/[A|a]\.?[C|c]\.?/}] | ([{lemma:"after"}] [{lemma:/[C|c]hrist/}])))?),
  action: ( Annotate($0, "myRule", "Rule$esteSiglo20"), Annotate($0, "myNER", "Rule$esteSiglo20"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue", Concat(:case{($$AC != NIL) => "BC", :else => ""}, Format("%02d", Subtract($num[0].myTValue,1))))),
result: ("DATE", Concat(:case{($$AC != NIL) => "BC", :else => ""}, Format("%02d", Subtract($num[0].myTValue,1))), "", "", "Rule$esteSiglo20")  ,
  stage : 20  }	

{ ruleType:   "tokens",
  pattern: ( (?$rel [{pos:/(JJ.*|.?DT)/}] [{pos:/(JJ.*|.?DT)/}]*)? (?$num (([{myNUM:"myNUMBER"} & {mySTValue:/\d?\d/}]+) | ([{myNER:"ORDINAL"}]+) | [{myNER:"DAYMONTH"}])) ((?$AC ([{word:/[B|b]\.?[C|c]\.?/}] | ([{lemma:"before"}] [{lemma:/[C|c]hrist/}]))) | (?$dc ([{word:/[A|a]\.?[C|c]\.?/}] | ([{lemma:"after"}] [{lemma:/[C|c]hrist/}]))))),
  action: ( Annotate($0, "myRule", "Rule$20AC"), Annotate($0, "myNER", "Rule$esteSiglo20"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue", Concat(:case{($$AC != NIL) => "BC", :else => ""}, Format("%02d", Subtract($num[0].myTValue,1))))),
result: ("DATE", Concat(:case{($$AC != NIL) => "BC", :else => ""}, Format("%02d", Subtract($num[0].myTValue,1))), "", "", "Rule$20AC")  ,
  stage : 20  }	


	{ ruleType:   "tokens",
  pattern: ( (?$rel [{pos:/(JJ.*|DT)/}] [{pos:/(JJ.*|DT)/}]*)? (?$gran [{word:"millenium"} & !{pos:/NNS/}]+) (?$num [{myNUM:"myNUMBER"} | {myNER:"ORDINAL"}]+) (?$AC ([{word:/[B|b]\.?[C|c]\.?/}] | ([{lemma:"antes"}][{lemma:/[C|c]hrist/}])))? (?$dc ([{word:/[A|a]\.?[C|c]\.?/}] | ([{lemma:"after"}] [{lemma:/[C|c]hrist/}])))?),
  action: ( Annotate($0, "myRule", "Rule$esteMilenio1"), Annotate($0, "myNER", "Rule$esteSiglo20"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue", Concat(:case{($$AC != NIL) => "BC", :else => ""}, Format("%01d", Subtract($num[0].myTValue,1))))),
result: ("DATE", Concat(:case{($$AC != NIL) => "BC", :else => ""}, Format("%02d", Subtract($num[0].myTValue,1))), "", "", "Rule$esteMilenio1")  ,
  stage : 20  }

	{ ruleType:   "tokens",
  pattern: ( (?$rel [{pos:/(JJ.*|DT)/}] [{pos:/(JJ.*|DT)/}]*)? (?$num [{myNER:"ORDINAL"}]+) (?$gran [{word:"millenium"} & !{pos:/.+P.+/}]+) (?$AC ([{word:/[B|b]\.?[C|c]\.?/}] | ([{lemma:"before"}] [{lemma:/[C|c]hrist/}])))? (?$dc ([{word:/[A|a]\.?[C|c]\.?/}] | ([{lemma:"after"}] [{lemma:/[C|c]hrist/}])))?),
  action: ( Annotate($0, "myRule", "Rule$estePrimerMilenio"), Annotate($0, "myNER", "Rule$estePrimerMilenio"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue", Concat(:case{($$AC != NIL) => "BC", :else => ""}, Format("%01d", Subtract($num[0].myTValue,1))))),
result: ("DATE", Concat(:case{($$AC != NIL) => "BC", :else => ""}, Format("%02d", Subtract($num[0].myTValue,1))), "", "", "Rule$estePrimerMilenio")  ,
  stage : 20  }	 
  
  	{ ruleType:   "tokens",
  pattern: ( (?$rel [{pos:/(JJ.*|DT)/}] [{pos:/(JJ.*|DT)/}]*)? (?$num [{myNER:"ORDINAL"}]+) (?$gran [{myNER:"DGRANULARITY"} & {myNERnormalized:/\d_MONTH/} & !{pos:/.+P.+/}]+)),
  action: ( Annotate($0, "myRule", "Rule$estePrimerCuatrimestre"), Annotate($0, "myNER", "Rule$estePrimerCuatrimestre"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue", Concat("anchor(TODAY,x,",DGRANULARITY_UNIT_MAP[$gran[0].myNERnormalized],$num[0].mySTValue,")"))),
result: ("DATE", Concat("anchor(TODAY,x,",DGRANULARITY_UNIT_MAP[$gran[0].myNERnormalized],$num[0].mySTValue,")"), "", "", "Rule$estePrimerCuatrimestre")  ,
  stage : 20  }
  
  
  	{ ruleType:   "tokens",
  pattern: ( (?$rel [{pos:/(JJ.*|DT)/}] [{pos:/(JJ.*|DT)/}]*)? (?$num [{myNUM:"myNUMBER"} || {myNER:"ORDINAL"}]+) (?$gran [{lemma:"century"}]+) (?$AC ([{word:/[B|b]\.?[C|c]\.?/}] | ([{lemma:"before"}] [{lemma:/[C|c]hrist/}])))? (?$dc ([{word:/[A|a]\.?[C|c]\.?/}] | ([{lemma:"after"}] [{lemma:/[C|c]hrist/}])))?),
  action: ( Annotate($0, "myRule", "Rule$esteSiglo20"), Annotate($0, "myNER", "Rule$esteSiglo20"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue", Concat(:case{($$AC != NIL) => "BC", :else => ""}, Format("%02d", Subtract($num[0].myTValue,1))))),
result: ("DATE", Concat(:case{($$AC != NIL) => "BC", :else => ""}, Format("%02d", Subtract($num[0].myTValue,1))), "", "", "Rule$esteSiglo20")  ,
  stage : 20  }
  
  	
  

{ ruleType:   "tokens",
  pattern: ( ((?$rel [{pos:/(JJ.*|.?DT)/} & !{myNER:"ORDINAL"} & !{timexType:"DATE"}] [{pos:/(JJ.*|.?DT)/} & !{myNER:"ORDINAL"} & !{timexType:"DATE"}]*) (?$gran [{lemma:"century"} & {pos:"NN"} & !{timexType:"DURATION"}]+))),
  action: ( Annotate($1, "myRule", "Rule$esteSiglo"), Annotate($1, "myNER", "Rule$esteSiglo"), Annotate($1, "timexType", "DATE"), Annotate($1, "timexValue", "anchor(TODAY,x,CENT)")),
  stage : 20  }		
  
  
  { ruleType:   "tokens",
  pattern: ( (?$rel [{pos:/(JJ.*|DT)/}] [{pos:/(JJ.*|DT)/}]*)? (?$gran [{word:"siglo"} & !{pos:/.+P.+/}]+) (?$num [{myNUM:"myRNUMBER"}]) (?$AC ([{word:/[B|b]\.?[C|c]\.?/}] | ([{lemma:"before"}] [{lemma:/[C|c]hrist/}])))? (?$dc ([{word:/[A|a]\.?[C|c]\.?/}] | ([{lemma:"after"}] [{lemma:/[C|c]hrist/}])))?),
  action: ( Annotate($0, "myRule", "Rule$esteSigloXX"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue", Concat(:case{($$AC != NIL) => "BC", :else => ""},$num[0].myNERnormalized))),
result: ("DATE", Concat(:case{($$AC != NIL) => "BC", :else => ""},$num[0].myNERnormalized), "", "", "Rule$esteSigloXX")  ,
  stage : 20  }
  

  
{ ruleType:   "tokens",
  pattern: ( (?$rel [{pos:/(JJ.*|DT)/}] [{pos:/(JJ.*|DT)/}]*)? (?$num [{myNUM:"myRNUMBER"}]) ((?$AC ([{word:/[B|b]\.?[C|c]\.?/}] | ([{lemma:"before"}] [{lemma:/[C|c]hrist/}]))) | (?$dc ([{word:/[A|a]\.?[C|c]\.?/}] | ([{lemma:"after"}] [{lemma:/[C|c]hrist/}])))) ),
  action: ( Annotate($0, "myRule", "Rule$elXXAC"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue", Concat(:case{($$AC != NIL) => "BC", :else => ""},$num[0].myNERnormalized))),
result: ("DATE", Concat(:case{($$AC != NIL) => "BC", :else => ""},$num[0].myNERnormalized), "", "", "Rule$elXXAC")  ,
  stage : 20  } 
  
{ ruleType:   "tokens",
  pattern: ( (?$rel [{pos:/(JJ.*|DT)/}] [{pos:/(JJ.*|DT)/}]*)? (?$gran [{word:"millenium"} & !{pos:/.+P.+/}]+) (?$num [{myNUM:"myRNUMBER"}]) (?$AC ([{word:/[B|b]\.?[C|c]\.?/}] | ([{lemma:"before"}] [{lemma:/[C|c]hrist/}])))? (?$dc ([{word:/[A|a]\.?[C|c]\.?/}] | ([{lemma:"after"}] [{lemma:/[C|c]hrist/}])))?),
  action: ( Annotate($0, "myRule", "Rule$esteMilenioI"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue", Concat(:case{($$AC != NIL) => "BC", :else => ""},$num[0].myNERnormalized))),
result: ("DATE", Concat(:case{($$AC != NIL) => "BC", :else => ""},$num[0].myNERnormalized), "", "", "Rule$esteMilenioI")  ,
  stage : 20  } 
  
  { ruleType:   "tokens",
  pattern: ( (?$rel [{pos:/(JJ.*|DT)/}] [{pos:/(JJ.*|DT)/}]*)? (?$gran [{word:"year"} & !{pos:/.+P.+/}]+) (?$num [{myNUM:"myNUMBER"} & !{myRule:/Rule\$DDdeMMdeYYYY(Com)?/}]+) (?$AC ([{word:/[B|b]\.?[C|c]\.?/}] | ([{lemma:"before"}] [{lemma:/[C|c]hrist/}])))? (?$dc ([{word:/[A|a]\.?[C|c]\.?/}] | ([{lemma:"after"}] [{lemma:/[C|c]hrist/}])))?),
  action: ( Annotate($0, "myRule", "Rule$esteaño2000"), Annotate($0, "timexType", "DATE"), Annotate($0, "myNER", "YEAR"), Annotate($0, "timexValue", Concat(:case{($$AC != NIL) => "BC", :else => ""}, $num[0].mySTValue)), Annotate($0, "Period", $gran[0].Period)),
result: ("DATE", Concat(:case{($$AC != NIL) => "BC", :else => ""},$num[0].mySTValue), "", "", "Rule$esteaño2000")  ,
  stage : 200  }
  
    { ruleType:   "tokens",
  pattern: ( [!{timexType:"DATE"}] (?$total (?$rel [{pos:/(JJ.*|DT)/}] [{pos:/(JJ.*|DT)/}]*)? (?$gran [{word:"year"} & !{pos:/.+P.+/}]+) (?$num [{myNUM:"myNUMBER"} & !{myRule:/Rule\$DDdeMMdeYYYY(Com)?/}]+) (?$AC ([{word:/[B|b]\.?[C|c]\.?/}] | ([{lemma:"before"}] [{lemma:/[C|c]hrist/}])))? (?$dc ([{word:/[A|a]\.?[C|c]\.?/}] | ([{lemma:"after"}] [{lemma:/[C|c]hrist/}])))?)),
  action: ( Annotate($total, "myRule", "Rule$esteaño2000bis"), Annotate($0, "myNER", "YEAR"), Annotate($total, "timexType", "DATE"), Annotate($total, "timexValue", Concat(:case{($$AC != NIL) => "BC", :else => ""}, $num[0].mySTValue)), Annotate($total, "Period", $gran[0].Period)),
result: ("DATE", Concat(:case{($$AC != NIL) => "BC", :else => ""},$num[0].mySTValue), "", "", "Rule$esteaño2000bis")  ,
  stage : 200  }									   

  { ruleType:   "tokens",
  pattern: ( ([{myNER:"PAS_REF_Adj"} & {pos:/(JJ.*|DT)/}]+) (?$gran [{myNER:"[TD]GRANULARITY"}]) ),
  action: ( Annotate($0, "myRule", "Rule$anterioresGranularity"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue",  Concat("anchor(TODAY,-,",DGRANULARITY_UNIT_MAP[$gran[0].myNERnormalized],")") ) ), 
  stage : 15  }
  
 # eg: las horas que vienen (indef)
{ ruleType:   "tokens",
  pattern: ( (?$gran [{myNER:"TGRANULARITY"}]) ([{myNER:"FUT_REF_Adj"} & {pos:/(JJ.*|DT)/}]+) ),
  action: ( Annotate($0, "myRule", "Rule$Granularityqueviene"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue",  Concat("anchor(TODAY,-,",DGRANULARITY_UNIT_MAP[$gran[0].myNERnormalized],")") ) ), 
  stage : 15  }
  
 { ruleType:   "tokens",
  pattern: ( (?$gran [{myNER:"TGRANULARITY"}]) ([{myNER:"PAS_REF_Adj"} & {pos:/(JJ.*|DT)/}]+) ),
  action: ( Annotate($0, "myRule", "Rule$Granularityanteriores"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue",  Concat("anchor(TODAY,-,",DGRANULARITY_UNIT_MAP[$gran[0].myNERnormalized],")") ) ), 
  stage : 15  }
 
 #TODO: poco claro como habria que normalizar esto con horas...
 # eg: la próxima hora (anchor)
{ ruleType:   "tokens",
  pattern: ( ([{myNER:/("FUT_REF_Adj"|"ORDINAL")/} & {pos:/(JJ.*|DT)/}]+) (?$gran [{myNER:"GRANULARITY"}]+) ),
  action: ( Annotate($0, "myRule", "Rule$proximoTGranularity"), Annotate($0, "timexType", "DURATION"), Annotate($0, "timexValue",  Concat("PT1", TGRANULARITY_UNIT_MAP[$gran[0].myNERnormalized])) ) , 
  stage : 15  }
  
  { ruleType:   "tokens",
  pattern: ( ([{pos:/(JJ.*|DT)/}]+ [{myNER:"PAS_REF_Adj"} & {pos:/(JJ.*|DT)/}]+) (?$gran [{myNER:"TGRANULARITY"}]+) ),
  action: ( Annotate($0, "myRule", "Rule$anteriorTGranularity"), Annotate($0, "timexType", "DURATION"), Annotate($0, "timexValue",  Concat("PT1", TGRANULARITY_UNIT_MAP[$gran[0].myNERnormalized])) ) , 
  stage : 15  }																																																													  { ruleType:   "tokens",				
  pattern: ( [{pos:/(JJ.*|DT)/}]? (?$gran [{myNER:/TGRANULARITY/}]+) ([{myNER:"FUT_REF_Adj"} & {pos:/A.*S.*/}]+) ),
  action: ( Annotate($0, "myRule", "Rule$proximoGranularity"), Annotate($0, "timexType", "DURATION"), Annotate($0, "timexValue",  Concat("PT1", TGRANULARITY_UNIT_MAP[$gran[0].myNERnormalized])) ) , 
  stage : 15  }
  
  { ruleType:   "tokens",
  pattern: ( [{pos:/(JJ.*|DT)/}]? (?$gran [{myNER:/TGRANULARITY/}]+) ([{myNER:"PAS_REF_Adj"} & {pos:/A.*S.*/}]+) ),
  action: ( Annotate($0, "myRule", "Rule$anteriorGranularity"), Annotate($0, "timexType", "DURATION"), Annotate($0, "timexValue",  Concat("PT1", TGRANULARITY_UNIT_MAP[$gran[0].myNERnormalized])) ) , 
  stage : 15  }
  
  
  # eg: la próxima semana
{ ruleType:   "tokens",
  pattern: (  [{pos:/(JJ.*|DT)/}]? ([{myNER:"FUT_REF_Adj"}]+) (?$gran [{myNER:/DGRANULARITY/} & !{pos:/NNS/}]+) ),
  action: ( Annotate($0, "myRule", "Rule$proximoGranularity"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue",  Concat("anchor(TODAY,+,1", DGRANULARITY_UNIT_MAP[$gran[0].myNERnormalized],")")) ) , 
  stage : 15  }
  
  { ruleType:   "tokens",
  pattern: ( [{pos:/(JJ.*|DT)/}]? ([{myNER:"PAS_REF_Adj"}]+) (?$gran [{myNER:/DGRANULARITY/} & !{pos:/NNS/}]+) ),
  action: ( Annotate($0, "myRule", "Rule$anteriorGranularity"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue",  Concat("anchor(TODAY,-,1", DGRANULARITY_UNIT_MAP[$gran[0].myNERnormalized],")")) ) , 
  stage : 15  }
  
  { ruleType:   "tokens",
  pattern: ( [{pos:/(JJ.*|DT)/}]? (?$gran [{myNER:/DGRANULARITY/} & !{pos:/NNS/}]+) ([{myNER:"FUT_REF_Adj"}]+) ),
  action: ( Annotate($0, "myRule", "Rule$proximoGranularity"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue",  Concat("anchor(TODAY,+,1", DGRANULARITY_UNIT_MAP[$gran[0].myNERnormalized],")")) ) , 
  stage : 15  }
  
  { ruleType:   "tokens",
  pattern: ( [{pos:/(JJ.*|DT)/}]? (?$gran [{myNER:/DGRANULARITY/} & !{pos:/NNS/}]+) ([{myNER:"PAS_REF_Adj"}]+) ),
  action: ( Annotate($0, "myRule", "Rule$anteriorGranularity"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue",  Concat("anchor(TODAY,-,1", DGRANULARITY_UNIT_MAP[$gran[0].myNERnormalized],")")) ) , 
  stage : 15  }
  
  
  
  # weekdays
  
  
    { ruleType:   "tokens",
  pattern: ( [{pos:/(JJ.*|DT)/}]? ([{myNER:"PAS_REF_Adj"} & {pos:/(JJ.*|DT)/}]+) (?$gran [{myNER:"WEEKDAY"}]) ),
  action: ( Annotate($0, "myRule", "Rule$anteriorWeekD"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue",  Concat("anchor(TODAY,-,", $gran[0].mySTValue,"DAYW)")) ) , 
  stage : 15  }
  
  { ruleType:   "tokens",
  pattern: ( [{pos:/(JJ.*|DT)/}]? ([{myNER:"FUT_REF_Adj"}]+) (?$gran [{myNER:"WEEKDAY"}]) ),
  action: ( Annotate($0, "myRule", "Rule$proximoWeekD"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue",  Concat("anchor(TODAY,+,", $gran[0].mySTValue,"DAYW)")) ) , 
  stage : 15  }
  
      { ruleType:   "tokens",
  pattern: (  [{pos:/(JJ.*|DT)/}]? (?$gran [{myNER:"WEEKDAY"}]) ([{myNER:"PAS_REF_Adj"}]+)),
  action: ( Annotate($0, "myRule", "Rule$anteriorWeekD"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue",  Concat("anchor(TODAY,-,", $gran[0].mySTValue,"DAYW)")) ) , 
  stage : 15  }
  
  { ruleType:   "tokens",
  pattern: ( [{pos:/(JJ.*|DT)/}]? (?$gran [{myNER:"WEEKDAY"}]) ([{myNER:"FUT_REF_Adj"}]+) ),
  action: ( Annotate($0, "myRule", "Rule$proximoWeekD"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue",  Concat("anchor(TODAY,+,", $gran[0].mySTValue,"DAYW)")) ) , 
  stage : 15  }
  
  { ruleType:   "tokens",
  pattern: ( [{pos:/(JJ.*|DT)/}] (?$gran [{myNER:"WEEKDAY"} & !{myRule:"Rule$proximoWeekD"} & !{myRule:"Rule$anteriorWeekD"}] ) ),
  action: ( Annotate($0, "myRule", "Rule$esteWeekD"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue",  Concat("anchor(TODAY,z,", $gran[0].mySTValue,"DAYW)")) ) , 
  stage : 16  }
  
  
  # months
  
  
    { ruleType:   "tokens",
  pattern: ( [{pos:/(JJ.*|DT)/}]? ([{myNER:"PAS_REF_Adj"}]+) (?$gran [{myNER:"MONTHS"}]+) ),
  action: ( Annotate($0, "myRule", "Rule$anteriorMonthS"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue",  Concat("DWanchor(-,", $gran[0].mySTValue,"MONTHS)")) ) , 
  stage : 15  }
  
  { ruleType:   "tokens",
  pattern: ( [{pos:/(JJ.*|DT)/}]? ([{myNER:"FUT_REF_Adj"}]+) (?$gran [{myNER:"MONTHS"}]+) ),
  action: ( Annotate($0, "myRule", "Rule$proximoMonthS"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue",  Concat("DWanchor(+,", $gran[0].mySTValue,"MONTHS)")) ) , 
  stage : 15  }
  
      { ruleType:   "tokens",
  pattern: (  [{pos:/(JJ.*|DT)/}]? (?$gran [{myNER:"MONTHS"}]+) ([{myNER:"PAS_REF_Adj"}]+)),
  action: ( Annotate($0, "myRule", "Rule$anteriorMonthS"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue",  Concat("DWanchor(-,", $gran[0].mySTValue,"MONTHS)")) ) , 
  stage : 15  }
  
  { ruleType:   "tokens",
  pattern: ( [{pos:/(JJ.*|DT)/}]? (?$gran [{myNER:"MONTHS"}]+) ([{myNER:"FUT_REF_Adj"}]+) ),
  action: ( Annotate($0, "myRule", "Rule$MonthSproximo"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue",  Concat("DWanchor(+,", $gran[0].mySTValue,"MONTHS)")) ) , 
  stage : 15  }
  
# eg: una hora
#{ ruleType:   "tokens",
#  pattern: ( ([{lemma:"a"}]) ([{myNER:"TGRANULARITY"}]) ),
#      action: ( Annotate($0, "timexType", "DURATION"), Annotate($0, "timexValue",  Concat($1[0].mySTValue, TGRANULARITY_UNIT_MAP[$2[0].myNERnormalized])), Annotate($0, "MyRule",  "Rule$unTGranularity"), Annotate($0, DURATION_MAP[$2[0].myNERnormalized], $2[0].timexValue ), Annotate($0, "Period", PERIOD_MAP[$2[0].myNERnormalized]) ) , 
#  stage : 15  }

# eg: media hora /cuarto de hora
#  { ruleType:   "tokens",
#    pattern: ( (?$added [{lemma:"half"}] || [{lemma:"quarter"}] [{lemma:"of"}] || [{myNUM:"myNUMBER"} && {mySTValue:"03"}] [{lemma:"quarter"}] [{lemma:"of"}] [{lemma:"a"}]) (?$granu [{myNER:"TGRANULARITY"}]+) ),
#       action: ( Annotate($0, "timexType", "DURATION"), Annotate($0, "myRule", "Rule$MediaHora"), Annotate($0, "timexValue", :case{($added[0].lemma == "half") => HALF_DURATION_MAP[$granu[0].myNERnormalized], ($added[0].mySTValue == "03") => TQUARTER_DURATION_MAP[$granu[0].myNERnormalized], :else => QUARTER_DURATION_MAP[$granu[0].myNERnormalized]}), Annotate($0, DURATION_MAP[$granu[0].myNERnormalized], $granu[0].timexValue), Annotate($0, "Period", :case{($granu[0].myNERnormalized == "DAY") => PERIOD_MAP["HOUR"], :else => PERIOD_MAP[$granu[0].myNERnormalized]}) ) , 
# 	  stage : 14  }
	  

  
  
#####################
# Number + DGranularity
##################### 
 
  # eg: dos dias
{ ruleType:   "tokens",
  pattern: ( ([{myNUM:"myNUMBER"}]+)  (?$gran [{myNER:"DGRANULARITY"}]+) (?$plus [{lemma:"and"}] [{lemma:"a"}]? (?$added [{lemma:"half"} | {lemma:"quarter"}] | ([{lemma:"three"} | {lemma:"3"}] [{lemma:"quarter"}])))? ),
    action: ( Annotate($0, "timexType", "DURATION"), Annotate($0, "myRule", "Rule$DosDias+half"), Annotate($0, "timexValue",  :case{($plus != NIL) => :case{($added[0].lemma == "half") => Concat(Add(Multiply(DGRANULARITY_AMOUNT_MAP[$gran[0].myNERnormalized], $1[0].myTValue), Multiply(DGRANULARITY_AMOUNT_MAP[$gran[0].myNERnormalized], 0.5)),DGRANULARITY_UNIT_MAP[$gran[0].myNERnormalized]), ($added[0].mySTValue != "03" && $added[0].mySTValue != "3") => Concat(Add(Multiply(DGRANULARITY_AMOUNT_MAP[$gran[0].myNERnormalized], $1[0].myTValue), Multiply(DGRANULARITY_AMOUNT_MAP[$gran[0].myNERnormalized], 0.25)),DGRANULARITY_UNIT_MAP[$gran[0].myNERnormalized]), :else => Concat(Add(Multiply(DGRANULARITY_AMOUNT_MAP[$gran[0].myNERnormalized], $1[0].myTValue), Multiply(DGRANULARITY_AMOUNT_MAP[$gran[0].myNERnormalized], 0.75)),DGRANULARITY_UNIT_MAP[$gran[0].myNERnormalized])}, :else => Concat(Multiply(DGRANULARITY_AMOUNT_MAP[$gran[0].myNERnormalized], $1[0].myTValue),DGRANULARITY_UNIT_MAP[$gran[0].myNERnormalized])}), Annotate($0, DURATION_MAP[$gran[0].myNERnormalized], $gran[0].timexValue), Annotate($0, "Period", $gran[0].Period) ) ,
  stage : 15  }
	
	
	
	#Concat(Multiply(DGRANULARITY_AMOUNT_MAP[$gran[0].myNERnormalized], $1[0].myTValue),DGRANULARITY_UNIT_MAP[$gran[0].myNERnormalized], :case{($plus != NIL) => :case{($added[0].lemma == "half") => HALF_DURATION_MAP[$gran[0].myNERnormalized], ($added[0].lemma == "quarter") => QUARTER_DURATION_MAP[$gran[0].myNERnormalized], :else => TQUARTER_DURATION_MAP[$gran[0].myNERnormalized]}, :else => ""})), Annotate($0, DURATION_MAP[$gran[0].myNERnormalized], $gran[0].timexValue), Annotate($0, "Period", PERIOD_MAP[$gran[0].myNERnormalized]) ) , 
  #stage : 15  }
  
  
  { ruleType:   "tokens",
  pattern: ( ([{myNUM:"myNUMBER"} & !{timexType:"DURATION"}]+) (?$plus [{lemma:"and"}] [{lemma:"a"}]? (?$added [{lemma:"half"} | {lemma:"quarter"}] | ([{lemma:"three"} | {lemma:"3"}] [{lemma:"quarter"}])))? (?$gran [{myNER:"DGRANULARITY"}]+)),
    action: ( Annotate($0, "timexType", "DURATION"), Annotate($0, "myRule", "Rule$Dos+halfDias"), Annotate($0, "timexValue",  Concat(Multiply(DGRANULARITY_AMOUNT_MAP[$gran[0].myNERnormalized], $1[0].myTValue),DGRANULARITY_UNIT_MAP[$gran[0].myNERnormalized], :case{($plus != NIL) => :case{($added[0].lemma == "half") => HALF_DURATION_MAP[$gran[0].myNERnormalized], ($added[0].lemma == "quarter") => QUARTER_DURATION_MAP[$gran[0].myNERnormalized], :else => TQUARTER_DURATION_MAP[$gran[0].myNERnormalized]}, :else => ""})), Annotate($0, DURATION_MAP[$gran[0].myNERnormalized], $gran[0].timexValue), Annotate($0, "Period", PERIOD_MAP[$gran[0].myNERnormalized]) ) , 
  stage : 16  }
 
 { ruleType:   "tokens",
  pattern: ( [{pos:/(JJ.*|DT)/}]? ([{myNER:"INDEF"}  & !{myNER:/.+_Adj/}]+) ([{myNER:"DGRANULARITY"}]+) ),
  action: ( Annotate($0, "myRule", "Rule$INDEFDGranularity"), Annotate($0, "timexType", "DURATION"), Annotate($0, "timexValue",  Concat("X", DGRANULARITY_UNIT_MAP[$2[0].myNERnormalized])), Annotate($0, DURATION_MAP[$2[0].myNERnormalized], $2[0].timexValue), Annotate($0, "Period", $2[0].Period) ) , 
  result: ("DURATION", Concat("X", DGRANULARITY_UNIT_MAP[$2[0].myNERnormalized]), "", "", "Rule$INDEFDGranularity"),
  stage : 15  }
 
# eg: medio dia /cuarto de año
 { ruleType:   "tokens",
   pattern: ( (?$added ([{lemma:"half"} | {lemma:"quarter"}])  || ([{myNUM:"myNUMBER"} && {mySTValue:"03"}] [{lemma:"quarter"}]) ) [{lemma:"of"}]? [{lemma:"a"}] (?$granu [{myNER:"DGRANULARITY"}]+) ),
      action: ( Annotate($0, "timexType", "DURATION"), Annotate($0, "myRule", "Rule$MedioDia"), Annotate($0, "timexValue", :case{($added[0].lemma == "half") => HALF_DURATION_MAP[$granu[0].myNERnormalized], ($added[0].mySTValue == "03") => TQUARTER_DURATION_MAP[$granu[0].myNERnormalized], :else => QUARTER_DURATION_MAP[$granu[0].myNERnormalized]}), Annotate($0, DURATION_MAP[$granu[0].myNERnormalized], $granu[0].timexValue), Annotate($0, "Period", PERIOD_MAP[$granu[0].myNERnormalized]) ) , 
	  stage : 14  }
  
# eg: tres veces
{ ruleType:   "tokens",
  pattern: ( ([{myNUM:"myNUMBER"}]+) ([{lemma:"time"}]) ),
  action: ( Annotate($0, "myRule", "Rule$numVeces"), Annotate($0, "myNER", "TIMES"), Annotate($0, "myNERnormalized", Concat($1[0].myNERnormalized,"X")) )  ,
  stage : 5  }
  
# eg: una vez
{ ruleType:   "tokens",
  pattern: ( ([{lemma:"once"}]) ),
  action: ( Annotate($0, "myRule", "Rule$once"), Annotate($0, "myNER", "TIMES"), Annotate($0, "myNERnormalized", "1X") )  ,
  stage : 5  }

# eg: twice
{ ruleType:   "tokens",
  pattern: ( ([{lemma:"twice"}]) ),
  action: ( Annotate($0, "myRule", "Rule$twice"), Annotate($0, "myNER", "TIMES"), Annotate($0, "myNERnormalized", "2X") )  ,
  stage : 5  }
  
  
  
  
  
####### ADDING QUARTERS that were not tagged as durations :)
  # eg: two quarters
{ ruleType:   "tokens",
  pattern: ( (?$amoun[{myNUM:"myNUMBER"} & !{timexType:"DURATION"} & !{timexType:"TIME"}]+)  (?$gran [{lemma:"quarter"} & !{timexType:"DURATION"} & !{timexType:"TIME"}]) (?$plus [{lemma:"and"}] [{lemma:"a"}]? (?$added [{lemma:"half"} | {lemma:"quarter"} & !{timexType:"DURATION"} & !{timexType:"TIME"}] | ([{lemma:"three"} | {lemma:"3"}] [{lemma:"quarter"}])))? ),
    action: ( Annotate($gran, "myNERnormalized", "3_MONTH"), Annotate($0, "timexType", "DURATION"), Annotate($0, "myRule", "Rule$quarter+half"), Annotate($0, "timexValue",  Concat(Multiply(DGRANULARITY_AMOUNT_MAP[$gran[0].myNERnormalized], $amoun[0].myTValue),DGRANULARITY_UNIT_MAP[$gran[0].myNERnormalized], :case{($plus != NIL) => :case{($added[0].lemma == "half") => HALF_DURATION_MAP[$gran[0].myNERnormalized], ($added[0].lemma == "quarter") => QUARTER_DURATION_MAP[$gran[0].myNERnormalized], :else => TQUARTER_DURATION_MAP[$gran[0].myNERnormalized]}, :else => ""})), Annotate($0, DURATION_MAP[$gran[0].myNERnormalized], $gran[0].timexValue), Annotate($0, "Period", PERIOD_MAP[$gran[0].myNERnormalized]) ) , 
  stage : 50  }



  
{ ruleType: "composite",
priority: 2.0,
  pattern: ( (?$month [{myNER:"MONTHS"}]) (?$day [{myNER:"DAYMONTH"} | {myNER:"MONTHN"} | ({myNUM:"myNUMBER"} & {mySTValue:/([1-2][0-9])|0?[1-9]|3[0-1]/})]) [{lemma:","}]? (?$year [{myNER:"YEAR"}])?) ,
  action: ( Annotate($0, "myDateDay", $day[0].myNERnormalized), Annotate($0, "myDateMonth", $month[0].myNERnormalized), Annotate($0, "myDateYear", :case{ ($$year != NIL) => $year[0].myNERnormalized, :else => "XXXX"}), Annotate($0, "myRule", "Rule$DD_MM,YYYY") ), 
  result: ( "DATE", Concat($0[0].myDateYear, "-", $0[0].myDateMonth, "-", $0[0].myDateDay), "", "", "Rule$DD_MM,YYYY")  ,
  stage : 25  }  
   
{ ruleType: "composite",
priority: 2.0,
  pattern: ( (?: [{myNER:"WEEKDAY"}] /,/? [{lemma:"on"}]? [{lemma:"the"}]?)? [{lemma:"day"}]? ([{myNER:"DAYMONTH"} | {myNER:"MONTHN"} | ({myNUM:"myNUMBER"} & {mySTValue:/([1-2][0-9])|0?[1-9]|3[0-1]/})])? [{lemma:"of"}]? [{lemma:"the"}]? [{lemma:"month"}]? [{lemma:"of"}]? ([{myNER:"MONTHS"}]) (?: [{lemma:"of"}]? [{lemma:"the"}]? /,/? [{lemma:"year"}]?)?  ([{myNER:"YEAR"}]+)) ,
  action: ( Annotate($0, "timexType","DATE"), Annotate($0, "myRule","Rule$DDdeMMdeYYYY"), Annotate($0, "timexValue", Concat(:case{ ($$3 != NIL) => $3[0].myNERnormalized, :else => "XXXX"}, "-", :case{ ($$2 != NIL) => $2[0].myNERnormalized, :else => "XX"}, "-", :case{ ($$1 != NIL) => $1[0].myNERnormalized, :else => "XX"})), :case{ ($$1 != NIL || $$3 != NIL  ) => (Annotate($0, "myDateDay", :case{ ($$1 != NIL) => $1[0].myNERnormalized, :else => "XX"}), Annotate($0, "myDateMonth", :case{ ($$2 != NIL) => $2[0].myNERnormalized, :else => "XX"}),Annotate($0, "myDateYear", :case{ ($$3 != NIL) => $3[0].myNERnormalized, :else => "XXXX"}));} ), 
  result: ( "DATE", $0[0].timexValue, "", "", "Rule$DDdeMMdeYYYY")  ,
  stage : 25  } 
  
{ ruleType: "composite",
matchedExpressionGroup: 1,
priority: 3.0,
  pattern: ( (?: [{lemma:"in"}]?  [{lemma:"the"}]? [{lemma:"year"}]?)  [{lemma:"of"}]? ([{myNER:"YEAR"}]+) (?$AC ([{word:/[B|b]\.?[C|c]\.?/}] | ([{lemma:"before"}] [{lemma:/[C|c]hrist/}])))? (?:[!{pos:/NN.*/}])) ,
  action: ( Annotate($total, "myDateYear", :case{ ($$year != NIL) => Concat(:case{($$AC != NIL) => "BC", :else => ""}, $year[0].myNERnormalized), :else => "XXXX"}) ),
  stage : 200  }  

# cuidado con el entre
# Sucesion de dias

{ ruleType: "tokens",
  pattern: ( [{lemma:"day"}] ([{myNER:"DAYMONTH"} | {myNER:"MONTHN"} | ({myNUM:"myNUMBER"} & {mySTValue:/([1-2][0-9])|0?[1-9]|3[0-1]/})]+) ) ,
  action: ( Annotate($0, "myRule", "Rule$eldia2"), Annotate($0, "timexType", "DATE"), Annotate($0, "myNER", "SPDAY"), Annotate($0, "myDateDay", Format("%02d", $1[0].myTValue)), Annotate($0, "timexValue", Concat("XXXX-XX-", Format("%02d", $1[0].myTValue)))),
  stage : 100  }


{ ruleType: "tokens",
  pattern: ( ((?$day0 [{myNER:"SPDAY"}]+) (?: /,/ | /and/ | /to/ | /until/))+ [{lemma:"the"}]?  [{lemma:"day"}]? (?$day [{myNER:"DAYMONTH"} | {myNER:"MONTHN"} | ({myNUM:"myNUMBER"} & {mySTValue:/([1-2][0-9])|0?[1-9]|3[0-1]/})]+) ) ,
  action: ( Annotate($day, "myRule", "Rule$eldia2y4"), Annotate($day, "timexType", "DATE"), Annotate($day, "myNER", "SPDAY"), Annotate($day, "myDateDay", Format("%02d", $day[0].myTValue)), Annotate($day, "timexValue", Concat("XXXX-XX-", Format("%02d", $day[0].myTValue))), Annotate($day0, "myRule", "Rule$eldia2y4"), Annotate($day0, "timexType", "DATE"), Annotate($day0, "myNER", "SPDAY")),
  stage : 101  }





  #TODO: deberia ser intervalo  
{ ruleType: "tokens",
  pattern: ( (?: [{lemma:"the"}]?  [{lemma:"day"}]? [{myNER:"DAYMONTH"} | {myNER:"MONTHN"} | ({myNUM:"myNUMBER"} & {mySTValue:/([1-2][0-9])|0?[1-9]|3[0-1]/})]+ (?: /,/ | [{lemma:"and"} | {lemma:"or"} | {lemma:"until"} | {lemma:"to"}]))+  [{lemma:"the"}]? ([({myNER:"DAYMONTH"} | {myNER:"MONTHN"} | ({myNUM:"myNUMBER"} & {mySTValue:/([1-2][0-9])|0?[1-9]|3[0-1]/})) & !{timexType:"DURATION"} & {timexType:"DATE"}]) ) ,
  action: ( Annotate($0, "myRule", "Rule$el2yel3deoctubre"), Annotate($0, "myDateMonth", $1[0].myDateMonth), Annotate($0, "timexType", "DATE"), Annotate($0, "myDateYear", $1[0].myDateYear)),
  stage : 100  }
  
  #TODO: deberia ser intervalo  
{ ruleType: "tokens",
  pattern: ( (?$new [{myNER:"DAYMONTH"} | {myNER:"MONTHN"} | ({myNUM:"myNUMBER"} & {mySTValue:/([1-2][0-9])|0?[1-9]|3[0-1]/})]+) (?: /,/ | /y/ | /al/ | /hasta/ | /a/ | /o/)+  (?$totold [{myNER:"DAYMONTH"} | {myNER:"MONTHN"} | ({myNUM:"myNUMBER"} & {mySTValue:/([1-2][0-9])|0?[1-9]|3[0-1]/} & {timexType:"DURATION"})]+ (?$old [{timexType:"DURATION"}]+)) ) ,
  action: ( Annotate($new, "myRule", "Rule$de2a3dur"), Annotate($new, "timexValue", Concat($old[0].Period, $new[0].mySTValue, :case{($old[0].Period == "PT") => TGRANULARITY_UNIT_MAP[$old[0].myNERnormalized], :else => DGRANULARITY_UNIT_MAP[$old[0].myNERnormalized]})), Annotate($new, "timexType", "DURATION"), Annotate($new, "Period", $old[0].Period), Annotate($totold, "myRule", "Rule$de2a3dur"), Annotate($totold, "timexValue", $totold[0].timexValue), Annotate($totold, "timexType", "DURATION") ),
  stage : 99  }  


{ ruleType: "tokens",
  pattern: ( (?: [{myNER:"DAYMONTH"} | {myNER:"MONTHN"} | ({myNUM:"myNUMBER"} & {mySTValue:/([1-2][0-9])|0?[1-9]|3[0-1]/})] (?: /,/ | [{lemma:"and"}]?))+  [{lemma:"the"}]? ([{myNER:"DAYMONTH"} | {myNER:"MONTHN"} | ({myNUM:"myNUMBER"} & {mySTValue:/([1-2][0-9])|0?[1-9]|3[0-1]/})]) ) ,
  action: ( Annotate($0, "myRule", "Rule$el2yel3deoctubre"), Annotate($0, "myDateMonth", $1[0].myDateMonth), Annotate($0, "myDateYear", $1[0].myDateYear)),
  stage : 100  }
  
  
  #{ ruleType: "tokens",
  #pattern: ( [{lemma:"the"}]?  ([!{timexType:"DURATION"} & ({myNER:"DAYMONTH"} | {myNER:"MONTHN"} | ({myNUM:"myNUMBER"} & {mySTValue:/([1-2][0-9])|0?[1-9]|3[0-1]/})]+)) ) ,
  #action: ( Annotate($0, "myRule", "Rule$eldia2"), Annotate($0, "timexType", "DATE"), Annotate($0, "myNER", "SPDAY"), Annotate($0, "myDateDay", Format("%02d", $1[0].myTValue)), Annotate($0, "timexValue", Concat("XXXX-XX-", Format("%02d", $1[0].myTValue)))),
  #stage : 100  }


{ ruleType: "tokens",
  pattern: ( ((?$day0 [{myNER:"SPDAY"}]+) (?: /,/ | /y/ | /al/ | /hasta/))+ [{lemma:"el"}]?  [{lemma:"día"}]? (?$day [{myNER:"DAYMONTH"} | {myNER:"MONTHN"} | ({myNUM:"myNUMBER"} & {mySTValue:/([1-2][0-9])|0?[1-9]|3[0-1]/})]+) ) ,
  action: ( Annotate($day, "myRule", "Rule$eldia2y4"), Annotate($day, "timexType", "DATE"), Annotate($day, "myNER", "SPDAY"), Annotate($day, "myDateDay", Format("%02d", $day[0].myTValue)), Annotate($day, "timexValue", Concat("XXXX-XX-", Format("%02d", $day[0].myTValue))), Annotate($day0, "myRule", "Rule$eldia2y4"), Annotate($day0, "timexType", "DATE"), Annotate($day0, "myNER", "SPDAY")),
  stage : 101  }
  
  
  #TODO: deberia ser intervalo  
{ ruleType: "tokens",
  pattern: ( (?: [{lemma:"el"}]?  [{lemma:"día"}]? [{myNER:"DAYMONTH"} | {myNER:"MONTHN"} | ({myNUM:"myNUMBER"} & {mySTValue:/([1-2][0-9])|0?[1-9]|3[0-1]/})]+ (?: /,/ | [{lemma:"y"} | {lemma:"o"} | {lemma:"a"} | {lemma:"al"} | {lemma:"hasta"}]))+  [{lemma:"el"}]? ([({myNER:"DAYMONTH"} | {myNER:"MONTHN"} | ({myNUM:"myNUMBER"} & {mySTValue:/([1-2][0-9])|0?[1-9]|3[0-1]/})) & !{timexType:"DURATION"} & {timexType:"DATE"}]) ) ,
  action: ( Annotate($0, "myRule", "Rule$el2yel3deoctubre"), Annotate($0, "myDateMonth", $1[0].myDateMonth), Annotate($0, "timexType", "DATE"), Annotate($0, "myDateYear", $1[0].myDateYear)),
  stage : 100  }
  
  #TODO: deberia ser intervalo  
{ ruleType: "tokens",
  pattern: ( (?$new [{myNER:"DAYMONTH"} | {myNER:"MONTHN"} | ({myNUM:"myNUMBER"} & {mySTValue:/([1-2][0-9])|0?[1-9]|3[0-1]/})]+) (?: /,/ | /y/ | /al/ | /hasta/ | /a/ | /o/)+  (?$totold [{myNER:"DAYMONTH"} | {myNER:"MONTHN"} | ({myNUM:"myNUMBER"} & {mySTValue:/([1-2][0-9])|0?[1-9]|3[0-1]/} & {timexType:"DURATION"})]+ (?$old [{timexType:"DURATION"}]+)) ) ,
  action: ( Annotate($new, "myRule", "Rule$de2a3dur"), Annotate($new, "timexValue", Concat($old[0].Period, $new[0].mySTValue, :case{($old[0].Period == "PT") => TGRANULARITY_UNIT_MAP[$old[0].myNERnormalized], :else => DGRANULARITY_UNIT_MAP[$old[0].myNERnormalized]})), Annotate($new, "timexType", "DURATION"), Annotate($new, "Period", $old[0].Period), Annotate($totold, "myRule", "Rule$de2a3dur"), Annotate($totold, "timexValue", $totold[0].timexValue), Annotate($totold, "timexType", "DURATION") ),
  stage : 99  }
  

{ ruleType: "composite",
 matchedExpressionGroup: 1,
  pattern: ( ([{lemma:/from/}]? [{lemma:/the/}]?  (?: [{myNER:"WEEKDAY"}] /,/? [{lemma:"to"} | {lemma:"until"}]?)? (?$dig [{myNER:"DAYMONTH"} | {myNER:"MONTHN"} | ({myNUM:"myNUMBER"} & {mySTValue:/([1-2][0-9])|0?[1-9]|3[0-1]/})]+)) (?: [{lemma:"and"} | {lemma:"or"} | {lemma:"to"} | {lemma:"until"}] | /,/)  [{lemma:/the/}]? ([{myRule:/Rule\$DDdeMMdeYYYY|Rule\$DDdeMMdeYYYYCom/}]) ) ,
  action: ( Annotate($1, "myRule", "Rule$DDdeMMdeYYYYCom"), Annotate($1, "timexType", "DATE"), Annotate($1, "myDateDay", $dig[0].myNERnormalized)),
  result: ( "DATE", Concat($dig[0].myDateYear, "-", $dig[0].myDateMonth, "-", $dig[0].myDateDay), "", "","Rule$DDdeMMdeYYYYCom")  ,
  stage : 100  }  


# Sucesion de meses
{ ruleType: "tokens",
  pattern: ( (?:  [{myNER:"MONTHS"}]+(?: [{lemma:"and"}] | /,/))+  ([{myNER:"MONTHS"}]+) ) ,
  action: ( Annotate($0, "myRule", "Rule$octubreydiciembre"), Annotate($0, "myDateYear", $1[0].myDateYear)),
  stage : 100  }

{ ruleType: "composite",
 matchedExpressionGroup: 1,
 priority: 1.0,
  pattern: ( ([{myNER:"MONTHS"}]+) (?: [{lemma:"and"} | {lemma:"or"} | {lemma:"to"} | {lemma:"until"}] | /,/) ([{myRule:/Rule\$DDdeMMdeYYYY|Rule\$DDdeMMdeYYYYCom/}]) ) ,
  action: ( Annotate($1, "myRule", "Rule$DDdeMMdeYYYYCom"), Annotate($1, "timexType", "DATE"), Annotate($1, "myDateMonth", $1[0].myNERnormalized)),
  result: ( "DATE", Concat($1[0].myDateYear, "-", $1[0].myDateMonth), "", "", "Rule$DDdeMMdeYYYYCom")  ,
  stage : 100  } 

# Sucesion de duraciones
{ ruleType: "composite",
 priority: 1.0,
  pattern: ( [{timexType:"DURATION"}]* ([{timexType:"DURATION"}]) (?: /,/) [{timexType:"DURATION"}]* ([{timexType:"DURATION"}]) ) ,
  action: ( :case{(DURATION_MAP[$1[0].myNERnormalized] != DURATION_MAP[$2[0].myNERnormalized]) => (Annotate($0, "timexType", "DURATION"), Annotate($0, "myRule", "Rule$1añoy2meses"), Annotate($0, DURATION_MAP[$1[0].myNERnormalized], $1[0].timexValue) , Annotate($0, DURATION_MAP[$2[0].myNERnormalized], $2[0].timexValue), Annotate($0, "Period", :case{($1[0].Period == "PT" || $2[0].Period == "PT") => "PT", :else => "P" })) ;}),
  stage : 100  }																																									

  
						{ ruleType: "composite",
 priority: 1.0,
  pattern: ( [{timexType:"DURATION"}]* ([{timexType:"DURATION"}]) (?: [{lemma:"and"}]) [{timexType:"DURATION"}]* ([{timexType:"DURATION"}]) ) ,
 #   pattern: ( [{timexType:"DURATION"}]* ([{timexType:"DURATION"}]{2}) (?: [{lemma:"and"}]) [{timexType:"DURATION"}]* ([{timexType:"DURATION"}]) ) ,					   
  action: ( Annotate($0, "timexType", "DURATION"), Annotate($0, "myRule", "Rule$1añoy2meses"), Annotate($0, DURATION_MAP[$1[0].myNERnormalized], $1[0].timexValue) , Annotate($0, DURATION_MAP[$2[0].myNERnormalized], $2[0].timexValue), Annotate($0, "Period", :case{($1[0].Period == "PT" || $2[0].Period == "PT") => "PT", :else => "P" }) ),
  stage : 100  }																																				 
{ ruleType: "composite",
 priority: 1.0,
  pattern: ( ([{myRule:"Rule$1añoy2meses"}]+) ) ,
  action: ( Annotate($0, "timexType", "DURATION"), Annotate($0, "myRule", "Rule$1añoy2meses"), Annotate($0, "timexValue", Concat("", :case {($0[1].myDurationDecade == NIL ) => "" , :else => $0[1].myDurationDecade}, :case {($0[1].myDurationYear == NIL ) => "" , :else => $0[1].myDurationYear}, :case {($0[1].myDurationMonth == NIL ) => "" , :else => $0[1].myDurationMonth}, :case {($0[1].myDurationWeek == NIL ) => "" , :else => $0[1].myDurationWeek}, :case {($0[1].myDurationWeekend == NIL ) => "" , :else => $0[1].myDurationWeekend}, :case {($0[1].myDurationDay == NIL ) => "" , :else => $0[1].myDurationDay}, :case {($0[1].myDurationHour == NIL ) => "" , :else => $0[1].myDurationHour}, :case {($0[1].myDurationMinute == NIL ) => "" , :else => $0[1].myDurationMinute}, :case {($0[1].myDurationSecond == NIL ) => "" , :else => $0[1].myDurationSecond})) ),
  #result: ( "DURATION", Concat($0[0].Period, :case {($0[1].myDurationDecade == NIL ) => "" , :else => $0[1].myDurationDecade}, :case {($0[1].myDurationYear == NIL ) => "" , :else => $0[1].myDurationYear}, :case {($0[1].myDurationMonth == NIL ) => "" , :else => $0[1].myDurationMonth}, :case {($0[1].myDurationWeek == NIL ) => "" , :else => $0[1].myDurationWeek}, :case {($0[1].myDurationWeekend == NIL ) => "" , :else => $0[1].myDurationWeekend}, :case {($0[1].myDurationDay == NIL ) => "" , :else => $0[1].myDurationDay}, :case {($0[1].myDurationHour == NIL ) => "" , :else => $0[1].myDurationHour}, :case {($0[1].myDurationMinute == NIL ) => "" , :else => $0[1].myDurationMinute}, :case {($0[1].myDurationSecond == NIL ) => "" , :else => $0[1].myDurationSecond}), "", "", "Rule$1añoy2meses")  ,
  stage : 199  }
  
####### Anchor

# TODO: Mañana hará dos años
{ ruleType: "composite",
 priority: 1.0,
  pattern: ( [{lemma:/last/} & {pos:/V.*/}] ([{timexType:"DURATION"}]+) ) ,
  annotate: ( Annotate($0, "timexType", "DURATION"), Annotate($0, "myRule", "Rule$haceDUR"), Annotate($0, "timexValue", $1[0].timexValue) ),
  result: ( "DURATION", $1[0].timexValue, "", "", "Rule$haceDUR")  ,
  stage : 200  }
  
  
  # AGO
  { ruleType: "composite",
 priority: 1.0,
  pattern: ( ([{timexType:"DURATION"}]+) [{lemma:/ago/}] ) ,
  annotate: ( Annotate($0, "timexType", "DURATION"), Annotate($0, "myRule", "Rule$haceDUR"), Annotate($0, "timexValue", $1[0].timexValue) ),
  result: ( "DURATION", $1[0].timexValue, "", "", "Rule$DURago")  ,
  stage : 200  }
  
{ ruleType: "composite",
 priority: 1.0,
  pattern: ( (?$times [{timexType:"TIME"}]+) [{lemma:","}]? [{lemma:"at"} || {lemma:"of"} || {lemma:"on"} || {lemma:"in"} || {lemma:"during"}]? [{lemma:"the"}]? (?$dates [{timexType:"DATE"}]+)) ,
  action: ( Annotate($0, "myRule", "Rule$TIME_DATE"), Annotate($0, "timexType", "TIME"), Annotate($0, "timexValue", Concat($dates[0].timexValue, "T",  $times[0].timexValue)), Annotate($0, "myDateDay", $dates[0].myDateDay), Annotate($0, "myDateMonth", $dates[0].myDateMonth), Annotate($0, "myDateYear", $dates[0].myDateYear), :case{($times[0].myTimePartDay != NIL) => Annotate($0, "myTimePartDay", $times[0].myTimePartDay);}, :case{($times[0].myTimeMinute != NIL) => Annotate($0, "myTimeMinute", $times[0].myTimeMinute);}, :case{($times[0].myTimeHour != NIL) => Annotate($0, "myTimeHour", $times[0].myTimeHour);}), 
  result: ( "TIME", Concat($dates[0].timexValue,  "T", $times[0].timexValue), "", "", "Rule$TIME_DATE")  ,
  stage : 150  }  
  

  
  # TWO RULES TO HANDLE DUR+AGO AND IN+DUR...
  
  #{ ruleType: "composite",
  #priority: 1.0,
   #pattern: ( ([{timexType:"DURATION"} & !{timexValue:/.*X.*/}]+) [{lemma:/ago|before/}] ) ,
   #annotate: ( Annotate($0, "timexType", "DATE"), Annotate($0, "myRule", "Rule$haceDUR"), Annotate($0, "timexValue", Concat("anchor(TODAY,", "-,", $1[0].timexValue,")")) ),
   #result: ( "DATE", Concat("anchor(TODAY,", "-,", $1[0].timexValue,")"), "", "", "Rule$haceDUR")  ,
   #stage : 200  }  
  
 #{ ruleType: "composite",
  #priority: 1.0,
   #pattern: ( [{lemma:/in/}] ([{timexType:"DURATION"} & !{timexValue:/.*X.*/}]+) ) ,
   #annotate: ( Annotate($0, "timexType", "DATE"), Annotate($0, "myRule", "Rule$enDUR"), Annotate($0, "timexValue", Concat("anchor(TODAY,", "+,", $1[0].timexValue,")")) ),
   #result: ( "DATE", Concat("anchor(TODAY,", "+,", $1[0].timexValue,")"), "", "", "Rule$enDUR")  ,
   #stage : 200  }  
 
																						 

# prox/last dates
  
  
    { ruleType:   "tokens",
  pattern: ( [{pos:/(JJ.*|DT)/}]? ([{myNER:"PAS_REF_Adj"}]+) (?$gran [{myRule:"Rule$DDdeMMdeYYYY"}]+) ),
  action: ( Annotate($0, "myRule", "Rule$anteriorDate"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue",  Concat("Danchor(-,", $gran[0].timexValue,")")) ) , 
  result: ( "DATE", $gran[0].timexValue, "", "", "Rule$anteriorDate" ) ,
  stage : 499  }
  
  { ruleType:   "tokens",
  pattern: ( [{pos:/(JJ.*|DT)/}]? ([{myNER:"FUT_REF_Adj"}]+) (?$gran [{myRule:"Rule$DDdeMMdeYYYY"}]+) ),
  action: ( Annotate($0, "myRule", "Rule$proximoDate"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue",  Concat("Danchor(+,", $gran[0].timexValue,")")) ) , 
  result: ( "DATE", $gran[0].timexValue, "", "", "Rule$proximoDate" ) ,
  stage : 499  }
  
      { ruleType:   "tokens",
  pattern: (  [{pos:/(JJ.*|DT)/}]? (?$gran [{myRule:"Rule$DDdeMMdeYYYY"}]+) ([{myNER:"PAS_REF_Adj"}]+)),
  action: ( Annotate($0, "myRule", "Rule$anteriorDate"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue",  Concat("Danchor(-,", $gran[0].timexValue,")")) ) , 
  result: ( "DATE", $gran[0].timexValue, "", "", "Rule$anteriorDate" ) ,
  stage : 499  }
  
  { ruleType:   "tokens",
  pattern: ( [{pos:/(JJ.*|DT)/}]? (?$gran [{myRule:"Rule$DDdeMMdeYYYY"}]+) ([{myNER:"FUT_REF_Adj"}]+) ),
  action: ( Annotate($0, "myRule", "Rule$Dateproximo"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue",  Concat("Danchor(+,", $gran[0].timexValue,")")) ) , 
  result: ( "DATE", $gran[0].timexValue, "", "", "Rule$Dateproximo" ) ,
  stage : 499  }  
  
  
# prox/last seasons
  
  
    { ruleType:   "tokens",
  pattern: ( [{pos:/(JJ.*|DT)/}]? ([{myNER:"PAS_REF_Adj"}]+) (?$gran [{myNER:"SEASON"}]+) ),
  action: ( Annotate($0, "myRule", "Rule$anteriorSeason"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue",  Concat("Sanchor(-,", $gran[0].timexValue,")")) ) , 
  result: ( "DATE", $gran[0].timexValue, "", "", "Rule$anteriorSeason" ) ,
  stage : 499  }
  
  { ruleType:   "tokens",
  pattern: ( [{pos:/(JJ.*|DT)/}]? ([{myNER:"FUT_REF_Adj"}]+) (?$gran [{myNER:"SEASON"}]+) ),
  action: ( Annotate($0, "myRule", "Rule$proximoSeason"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue",  Concat("Sanchor(+,", $gran[0].timexValue,")")) ) , 
  result: ( "DATE", $gran[0].timexValue, "", "", "Rule$proximoSeason" ) ,
  stage : 499  }
  
      { ruleType:   "tokens",
  pattern: (  [{pos:/(JJ.*|DT)/}]? (?$gran [{myNER:"SEASON"}]+) ([{myNER:"PAS_REF_Adj"}]+)),
  action: ( Annotate($0, "myRule", "Rule$anteriorSeason"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue",  Concat("Sanchor(-,", $gran[0].timexValue,")")) ) , 
  result: ( "DATE", $gran[0].timexValue, "", "", "Rule$anteriorSeason" ) ,
  stage : 499  }
  
    
  { ruleType:   "tokens",
  pattern: ( [{pos:/(JJ.*|DT)/}]? (?$gran [{myNER:"SEASON"}]+) ([{myNER:"FUT_REF_Adj"}]+) ),
  action: ( Annotate($0, "myRule", "Rule$Seasonproximo"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue",  Concat("Sanchor(+,", $gran[0].timexValue,")")) ) , 
  result: ( "DATE", $gran[0].timexValue, "", "", "Rule$Seasonproximo" ) ,
  stage : 499  } 									
####### ISOLATED
# PartDay isolated
{ ruleType:   "composite",
  pattern: ( [{myRule:"Rule$PARTDAY"}]+  ),
  result: ( "TIME", Concat("anchor(TODAY,x,D)T",$0[0].timexValue), "", "", "Rule$PARTDAY" ) ,
  stage : 500  }	

# Weekday isolated
{ ruleType:   "composite",
  pattern: ( [{myRule:"Rule$WEEKL"}]  ),
  result: ( "DATE", Concat($0[0].timexValue,""), "", "", "Rule$WEEKL" ) ,
  stage : 500  }   

  
# Month isolated
{ ruleType:   "composite",
  pattern: ( [{myNER:"MONTHS"} && !{myRule:/Rule\$DDdeMMdeYYYY(Com)?/} && !{myRule:"Rule$anteriorMonthS"} &&  !{myRule:"Rule$proximoMonthS"}]+  ),
  result: ( "DATE", Concat($0[0].timexValue,""), "", "", "Rule$MONTHS" ) ,
  stage : 500  } 
  
{ ruleType:   "tokens",
  pattern: ( [{myRule:"Rule$anteriorMonthS"} |  {myRule:"Rule$proximoMonthS"}]+  ),
  result: ( "DATE", $0[0].timexValue, "", "", $0[0].myRule ) ,
  stage : 500  }																				   
  # Weekend isolated
{ ruleType:   "composite",
  pattern: ( [{myTType:"finsemana"}]+  ),
  result: ( "DATE", Concat($0[0].timexValue,""), "", "", "Rule$finsemana" ) ,
  stage : 500  } 
  
  # Workday isolated
 { ruleType:   "composite",
   pattern: ( [{myTType:"workday"}]+  ),
   result: ( "DATE", Concat($0[0].timexValue,""), "", "", "Rule$workday" ) ,
   stage : 200  }
  
    # anchored isolated
{ ruleType:   "composite",
  # pattern: ( [{timexValue:/anchor.*/}]+  ),  
  pattern: ( [{timexValue:/anchor.*/} && !{timexType:"TIME"}]+  ),
  result: ( "DATE", Concat($0[0].timexValue,""), "", "", $0[0].myRule ) ,
  stage : 500  } 
  
   # duration
 { ruleType:   "composite",
   pattern: ( [{myRule:"Rule$INDEFDGranularity"}]+  ),
   result: ( "DURATION", $0[0].timexValue, "", "", "Rule$INDEFDGranularity" ) ,
   stage : 600  } 
   
  { ruleType:   "composite",
   pattern: ( [{timexType:"DURATION"}]+  ),
   result: ( "DURATION", Concat("", $0[0].timexValue), "", "", $0[0].myRule ) ,
   stage : 500  } 
  
     # time
{ ruleType:   "composite",
  pattern: ( [{timexType:"TIME"}]+  ),
  action: (Annotate($0, "timexType", "TIME"), Annotate($0, "timexValue", $1[0].timexValue)),
  #result: ( "TIME", $1[0].timexValue, "", "", $1[0].myRule ) ,
    result: ( "TIME", Concat("anchor(TODAY,x,D)",$1[0].timexValue), "", "", $1[0].myRule ) ,
  stage : 500  }
  
  
      # set
{ ruleType:   "composite",
  pattern: ( [{timexType:"SET"}]+  ),
  result: ( "SET", Concat($0[1].timexValue,""), :case{($0[0].timexFreq != NIL) => Concat($0[0].timexFreq, ""), :else => ""} , "", $0[0].myRule ) ,
  stage : 499  } 
  
        # dateRefs
{ ruleType:   "composite",
  pattern: ( [{timexType:"DATE"} && {timexValue:/.+_REF/}]+  ),
  result: ( "DATE", Concat($0[0].timexValue,""), "", "", $0[0].myRule ) ,
  stage : 500  } 
  
        # date en el año
{ ruleType:   "composite",
  pattern: ( ([{timexType:"DATE"} && {myRule:"Rule$EnElAñoMyNumber"}]+)  ),
  result: ( "DATE", Concat($1[0].timexValue,""), "", "", "Rule$EnElAñoMyNumber" ) ,
  stage : 200  }   

  
        # date en el año
{ ruleType:   "composite",
  pattern: ( ([{timexType:"DATE"} && {myRule:"Rule$EnElAñoYYYY"}]+)  ),
  result: ( "DATE", Concat($1[0].timexValue,""), "", "", "Rule$EnElAñoYYYY" ) ,
  stage : 200  }   
  
  
  
        # date el dia
{ ruleType:   "composite",
  pattern: ( ([{timexType:"DATE"} && {myRule:"Rule$eldia2y4"}]+)  ),
  result: ( "DATE", Concat($1[0].timexValue,""), "", "", "Rule$eldia2y4" ) ,
  stage : 200  }  
  
  
          # agregada post para evitar los días 15 y 16 de marzo del 2001
{ ruleType:   "composite",
  pattern: ( ([{timexType:"DATE"} && {myRule:"Rule$eldia2y4"}]+ (?$fecha [{myRule:/Rule\$DDdeMMdeYYYY(Com)?/}]+))  ),
  result: ( "DATE", $fecha[0].timexValue, "", "", "Rule$DDdeMMdeYYYYCom" ) ,
  stage : 201  }  
  
 
  
          # date el dia (first ones are in case of adjectives...)
{ ruleType:   "composite",
  pattern: ( [{timexType:"DATE"}]* ([{timexType:"DATE"} && {myRule:"Rule$eldia2"}]+)  ),
  result: ( "DATE", Concat($1[0].timexValue,""), "", "", "Rule$eldia2" ) ,
  stage : 200  }  
  

  
        # season
{ ruleType:   "composite",
  pattern: ( ([{timexType:"DATE"} && {myRule:"Rule$SEASON"}]+)  ),
  result: ( "DATE", Concat($1[0].timexValue,""), "", "", "Rule$SEASON" ) ,
  stage : 200  } 
  
  { ruleType:   "composite",
  pattern: ( ([{timexType:"DATE"} && {myRule:"Rule$interval"}]+)  ),
  result: ( "DATE", Concat($1[0].timexValue,""), "", "", "Rule$interval" ) ,
  stage : 200  } 
  
  { ruleType:   "composite",
  pattern: ( [{myNER:"MOD"}]+ ([{timexType:"DATE"}]+)  ),
  result: ( "DATE", Concat($1[0].timexValue,""), "", "", "Rule$modDate" ) ,
  stage : 2000  } 
  
    { ruleType:   "composite",
  pattern: ( [{myNER:"MOD"}]+ ([{timexType:"DURATION"}]+)  ),
  result: ( "DURATION", Concat($1[0].timexValue,""), "", "", "Rule$modDur" ) ,
  stage : 2000  } 
  
      { ruleType:   "composite",
  pattern: ( [{myNER:"MOD"}]+ ([{timexType:"TIME"}]+)  ),
  result: ( "TIME", Concat($1[0].timexValue,""), "", "", "Rule$modTIME" ) ,
  stage : 2000  }			  
	{ ruleType:   "composite",
  pattern: ( [{myNER:"MODAPPROX"}]+ ([{timexType:"DATE"}]+)  ),
  result: ( "DATE", Concat($1[0].timexValue,""), "", "APPROX", "Rule$mod_approxDate" ) ,
  stage : 2000  } 
  
    { ruleType:   "composite",
  pattern: ( [{myNER:"MODAPPROX"}]+ ([{timexType:"DURATION"}]+)  ),
  result: ( "DURATION", Concat($1[0].timexValue,""), "", "APPROX", "Rule$mod_approxDur" ) ,
  stage : 2000  } 
  
      { ruleType:   "composite",
  pattern: ( [{myNER:"MODAPPROX"}]+ /a/? ([{timexType:"TIME"}]+)  ),
  result: ( "TIME", Concat($1[0].timexValue,""), "", "APPROX", "Rule$mod_approxTIME" ) ,
  stage : 2000  } 
  
  
  
  { ruleType:   "composite",
  pattern: ( [{myNER:"MODMID"}]+ ([{timexType:"DATE"}]+)  ),
  result: ( "DATE", Concat($1[0].timexValue,""), "", "MID", "Rule$mod_MIDDate" ) ,
  stage : 2000  } 
  
    { ruleType:   "composite",
  pattern: ( [{myNER:"MODMID"}]+ ([{timexType:"DURATION"}]+)  ),
  result: ( "DURATION", Concat($1[0].timexValue,""), "", "MID", "Rule$mod_MIDDur" ) ,
  stage : 2000  } 
  
      { ruleType:   "composite",
  pattern: ( [{myNER:"MODMID"}]+ /a/? ([{timexType:"TIME"}]+)  ),
  result: ( "TIME", Concat($1[0].timexValue,""), "", "MID", "Rule$mod_MIDTIME" ) ,
  stage : 2000  }
  
  
  { ruleType:   "composite",
  pattern: ( [{myNER:"MODEND"}]+ ([{timexType:"DATE"}]+)  ),
  result: ( "DATE", Concat($1[0].timexValue,""), "", "END", "Rule$mod_ENDDate" ) ,
  stage : 2000  } 
  
    { ruleType:   "composite",
  pattern: ( [{myNER:"MODEND"}]+ ([{timexType:"DURATION"}]+)  ),
  result: ( "DURATION", Concat($1[0].timexValue,""), "", "END", "Rule$mod_ENDDur" ) ,
  stage : 2000  } 
  
      { ruleType:   "composite",
  pattern: ( [{myNER:"MODEND"}]+ /a/? ([{timexType:"TIME"}]+)  ),
  result: ( "TIME", Concat($1[0].timexValue,""), "", "END", "Rule$mod_ENDTIME" ) ,
  stage : 2000  }
  
  
  
  { ruleType:   "composite",
  pattern: ( [{myNER:"MODSTART"}]+ ([{timexType:"DATE"}]+)  ),
  result: ( "DATE", Concat($1[0].timexValue,""), "", "START", "Rule$mod_STARTDate" ) ,
  stage : 2000  } 
  
    { ruleType:   "composite",
  pattern: ( [{myNER:"MODSTART"}]+ ([{timexType:"DURATION"}]+)  ),
  result: ( "DURATION", Concat($1[0].timexValue,""), "", "START", "Rule$mod_STARTDur" ) ,
  stage : 2000  } 
  
      { ruleType:   "composite",
  pattern: ( [{myNER:"MODSTART"}]+ /a/? ([{timexType:"TIME"}]+)  ),
  result: ( "TIME", Concat($1[0].timexValue,""), "", "START", "Rule$mod_STARTTIME" ) ,
  stage : 2000  }																				  
  # NOT USEFUL FOR THE LEGAL DOMAIN
  
	# adj proximo (evitar proximo a)
{ ruleType:   "tokens",
  pattern: ( ([{lemma:/next|follow/} && !{timexValue:/.*/}]+) ),
  action: ( Annotate($1, "myRule", "Rule$FutureRef"), Annotate($1, "timexType", "DATE"), Annotate($1, "timexValue", "FUTURE_REF") )  ,
  stage : 699  } 
  
{ ruleType:   "tokens",
  pattern: ( ([{pos:/RB.*/} && {lemma:/future/} && !{timexValue:/.*/}]+) ),
  action: ( Annotate($1, "myRule", "Rule$FutureRef"), Annotate($1, "timexType", "DATE"), Annotate($1, "timexValue", "FUTURE_REF") )  ,
  stage : 699  }							  
{ ruleType:   "tokens",
  pattern: ( [{pos:/RB.*/} && {myRule:"Rule$FutureRef"}] ),
  result: ( "DATE", "FUTURE_REF", "", "", "Rule$AdjProximo" ) ,
  stage : 700  }   


# he quitado "antiguo"
{ ruleType:   "composite",
  pattern: ( [{pos:/RB.*/} && {lemma:/recent|past|ancient/}]+)   ,
  action: ( Annotate($1, "myRule", "Rule$PastRef"), Annotate($1, "timexType", "DATE"), Annotate($1, "timexValue", "PAST_REF") )  ,
  stage : 699  }		  
  
  
  # adj reciente
{ ruleType:   "tokens",
  pattern: ( [{myRule:"Rule$PastRef"}] ),
  result: ( "DATE", "PAST_REF", "", "", "Rule$AdjReciente" ) ,
  stage : 700  }   

  # adj actual
{ ruleType:   "tokens",
  pattern: ( ([{lemma:/current/} && !{timexValue:/.*/}]+)  ),
  result: ( "DATE", "PRESENT_REF", "", "", "Rule$AdjActual" ) ,
  stage : 700  }


  # adj recientemente (quitamos previamente)
{ ruleType:   "tokens",
  pattern: ( [{word:/recently|lately|/} && !{timexValue:/.*/}]+  ),
  result: ( "DATE", "PAST_REF", "", "", "Rule$AdjReciente" ) ,
  stage : 700  }										 

{ ruleType:   "tokens",
  pattern: ( [{myRule:"Rule$AdjReciente"}]+),
  result: ( "DATE", "PAST_REF", "", "", "Rule$AdjReciente" ) ,
  stage : 700  }     

  # adj actualmente
{ ruleType:   "tokens",
  pattern: ( [{word:/[C|c]urrently/} && !{timexValue:/.*/}]+  ),
  result: ( "DATE", "PRESENT_REF", "", "", "Rule$AdjActual" ) ,
  stage : 700  }  

  

  
{ ruleType:   "tokens",
  pattern: ([{myRule:"Rule$EnPresentRef"}]+),
  result: ( "DATE", "PRESENT_REF", "", "", "Rule$EnPresentRef" ) ,
  stage : 700  }
  
#  { ruleType:   "tokens",
#  pattern: (([{lemma:"ahora"}] [{lemma:"mismo"}]) | ([{lemma:"hoy"}] [{lemma:"en"}] [{lemma:"día"}]) | ([{lemma:"a"}] [{lemma:"día"}] [{lemma:"de"}] [{lemma:"hoy"}])),
#  action: ( Annotate($0, "myRule", "Rule$PresentRef"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue", "PRESENT_REF") )  ,
#  result: ( "DATE", "PRESENT_REF", "", "", "Rule$PresentRef" ) ,
#  stage : 700  }
  

  
#  { ruleType:   "tokens",
#  pattern: ([{myRule:"Rule$PresentRefAHORA"}]),
#  result: ( "DATE", "PRESENT_REF", "", "", "Rule$PresentRefAHORA" ) ,
#  stage : 701  }
  
    { ruleType:   "tokens",
  pattern: ((?$total (?$ref2 [{timexValue:"anchor(TODAY,+,0D)"} | {timexValue:"anchor(TODAY,+,1D)"} | {timexValue:"anchor(TODAY,-,1D)"}]+) /,/? (?$ref [{timexType:"DATE"}]+))),# (?:[{word:","} | {word:";"}] [!{timexType:"DATE"}])),
  action: ( Annotate($total, "myRule", "Rule$hoy,date"), Annotate($total, "timexType", "DATE"), Annotate($total, "timexValue", $ref2[0].timexValue) )  ,
  stage : 1000  }
  
      { ruleType:   "tokens",
  pattern: ([{myRule:"Rule$hoy,date"}]+),
  result: ( "DATE", $0[0].timexValue, "", "", "Rule$hoy,date" ) ,
  stage : 1001  }
  
  { ruleType:   "tokens",
  pattern: ([{lemma:"the"} | {lemma:"this"} | {lemma:"that"}]? [{myNER:"FUT_REF_Adj"} | {myNER:"PAST_REF_Adj"}] [{pos:/(JJ.*|DT)/}]* ([{timexType:"DURATION"}]+)),
  result: ( "DURATION", $1[0].timexValue, "", "", "Rule$ProxDuration" ) ,
  stage : 1001  }
  
  { ruleType:   "tokens",
  pattern: ([{lemma:"the"} | {lemma:"this"} | {lemma:"that"}]? ([{timexType:"DURATION"}]+) [{pos:/(JJ.*|DT)/}]* [{myNER:"FUT_REF_Adj"} | {myNER:"PAST_REF_Adj"}]),
  result: ( "DURATION", $1[0].timexValue, "", "", "Rule$ProxDuration" ) ,
  stage : 1001  }

  
  
  
  

{ ruleType:   "tokens",
  pattern: ( [{pos:/(JJ.*|DT)/}]? (?$season [{myNER:"SEASON"}]) [{lemma:"of"}]? [{lemma:"the"}]? [{lemma:"year"}]? (?$year [{myNER:"YEAR"}]+) ),
  action: ( Annotate($0, "myRule", "Rule$SEASON"), Annotate($0, "myNER", "SEASON"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue", Concat($year[0].timexValue, $season[0].myNERnormalized))),
  stage : 5  }
  
  
  # eg: intervalos (tb podrian ser otras cosas, no solo años)
#{ ruleType:   "tokens",
#  pattern: ( ([{lemma:"a"}] [{lemma:"partir"}])? ([{lemma:"entre"} | {lemma:"desde"} | {lemma:"de"}]) [{lemma:"el"}]? [{lemma:"año"}]? (?$year1 [{myNER:"YEAR"}]+) [{lemma:"y"}]? ([{lemma:"y"} | {lemma:"a"} | {lemma:"al"} | {lemma:"hasta"}] ) [{lemma:"el"}]? [{lemma:"año"}]? (?$year2 [{myNER:"YEAR"}]+) [!{pos:/(NC|AQ).*/}] ),
#  action: ( Annotate($year1, "myRule", "Rule$interval"), Annotate($year1, "myNER", "INTERVAL"), Annotate($year1, "timexType", "DATE"), Annotate($year1, "timexValue", $year1[0].timexValue), Annotate($year2, "myRule", "Rule$interval"), Annotate($year2, "myNER", "INTERVAL"), Annotate($year2, "timexType", "DATE"), Annotate($year2, "timexValue", $year2[0].timexValue)),
#  stage : 5  }
  
   # eg: intervalos (tb podrian ser otras cosas, no solo años)
#{ ruleType:   "tokens",
#  pattern: ( (([{lemma:"a"}] [{lemma:"partir"}] [{lemma:"de"}]) |[{lemma:"desde"}]) [{lemma:"el"}]? [{lemma:"año"}]? (?$year1 [{myNER:"YEAR"}]+) ([!{pos:/(NC|AQ).*/}]) ) ,
#  action: ( Annotate($year1, "myRule", "Rule$interval"), Annotate($year1, "myNER", "INTERVAL"), Annotate($year1, "timexType", "DATE"), Annotate($year1, "timexValue", $year1[0].timexValue)),
#  stage : 5  }
  
#{ ruleType:   "tokens",
#  pattern: ( ([{lemma:"y"} | {lemma:"a"} | {lemma:"hasta"}] ) [{lemma:"el"}]? [{lemma:"año"}]? (?$year2 [{myNER:"YEAR"}]+) ([!{pos:/(NC|AQ).*/}]) ),
#  action: (  Annotate($year2, "myRule", "Rule$interval"), Annotate($year2, "myNER", "INTERVAL"), Annotate($year2, "timexType", "DATE"), Annotate($year2, "timexValue", $year2[0].timexValue)),
#  stage : 5  }
  
  { ruleType:   "tokens",
  pattern: (  (([{word:/[T|t][H|h][E|e]/} | {word:/[T|t][H|h][O|o][S|s][E|e]/}]  [{pos:/(JJ.*|DT)/}]* [{word:/[Y|y][E|e][A|a][R|r][S|s]/}]) | ( [{lemma:"decade"}] [{lemma:"of"}] [{word:/[T|t][H|h][E|e]/}]?)) (?$dec [{myNUM:"myNUMBER"}]+) ),
  action: ( Annotate($0, "myNER", "los60"), Annotate($0, "myRule", "Rule$los60"), Annotate($0, "timexType", "DATE"), Annotate($0, "timexValue", :case{($dec[0].myTValue > 2000) => Format("%d", Divide($dec[0].myTValue, 10)), :else => Concat("19",Format("%d", Divide($dec[0].myTValue, 10)))}) ), 
  result: ( "DATE",:case{($dec[0].myTValue > 2000) => Format("%d", Divide($dec[0].myTValue, 10)), :else => Concat("19",Format("%d", Divide($dec[0].myTValue, 10)))}, "", "", "Rule$los60" ), 
  stage : 5  }



############ FILTER RULES

#{ ruleType: "filter",
#  pattern: ([{word:"última"}] [{word:"hora"}]),
#  stage : 5000  }



## MODS



{ ruleType:   "tokens",
  pattern: ( [{lemma:"the"}]? (?$total ((([{lemma:/fin(al)?/} | {lemma:/end/} | {lemma:/late/}]) [{lemma:/of/}]?))) ),
action: (Annotate($0, "myNER", "MODEND"), Annotate($0, "myRule", "Rule$mod")),
  stage : 1  }									
				  
  
  { ruleType:   "tokens",
  pattern: ( [{lemma:"the"}]? (?$total ([({lemma:/begin/} | {lemma:/start/} | {lemma:/early/}) & !{word:/.+([auAU][Nn]|[Dd])/}]) [{lemma:/of/}]?) ),
action: (Annotate($0, "myNER", "MODSTART"), Annotate($0, "myRule", "Rule$mod")),
  stage : 1  }
  
  
  { ruleType:   "tokens",
  pattern: ( [{lemma:"at"}]? [{lemma:"the"}]? (?$total ([{lemma:/mid/}]) [{lemma:/of/}]?) ),
action: (Annotate($0, "myNER", "MODMID"), Annotate($0, "myRule", "Rule$mod")),
  stage : 1  }  
  
  
  { ruleType:   "tokens",
  pattern: ( ([{lemma:"about"} | {lemma:"circa"} | {lemma:/around/} | {lemma:"almost"} | {word:"barely"} | {word:"aproximately"}]) | ([{lemma:/more/}] | [{lemma:/or/}] | [{lemma:/less/}])) ,
action: (Annotate($0, "myNER", "MODAPPROX"), Annotate($0, "myRule", "Rule$mod")),
  stage : 1  }
  
 { ruleType:   "tokens",
  pattern: ( (( [{lemma:/more/} | {lemma:/less/}] [{lemma:/than/}]) |  ( [{lemma:/at/}] [{lemma:/least/}]) |  ( [{lemma:"all"}])) [{pos:/(JJ.*|DT)/}]* ) ,
action: (Annotate($0, "myNER", "MOD"), Annotate($0, "myRule", "Rule$mod")),
  stage : 1  }
  
  
  
  { ruleType:   "tokens",
  pattern: ( (?$total [{lemma:"the"}] ([{lemma:"rest"} | {lemma:"remain"}]) [{lemma:"of"}] [{lemma:/P?DT|JJ/}]*) (?$gran [{myNER:/DGRANULARITY/}]+) ),
action: (Annotate($total, "myNER", "QUEDAR"), Annotate($total, "myRule", "Rule$loquequeda"), Annotate($total, "timexValue", Concat("Ranchor(+,",DGRANULARITY_UNIT_MAP[$gran[0].myNERnormalized],")")), Annotate($gran, "timexType", "DATE"), Annotate($gran, "timexValue", Concat("anchor(TODAY,x,", DGRANULARITY_UNIT_MAP[$gran[0].myNERnormalized],")")), Annotate($gran, "myRule", "Rule$loquequedaGRAN")),
  stage : 1000  }
  
  { ruleType:   "tokens",
  pattern: ( (?$total ([{lemma:"to"}] [{lemma:"date"}]) | ([{lemma:"so"}] [{lemma:"far"}]) [{lemma:/P?DT|JJ/}]*) (?$gran [{myNER:/DGRANULARITY/}]+) ),
action: (Annotate($total, "myNER", "QUEDAR"), Annotate($total, "myRule", "Rule$loquequeda"), Annotate($total, "timexValue", Concat("Ranchor(-,",DGRANULARITY_UNIT_MAP[$gran[0].myNERnormalized],")")), Annotate($gran, "timexType", "DATE"), Annotate($gran, "timexValue", Concat("anchor(TODAY,x,", DGRANULARITY_UNIT_MAP[$gran[0].myNERnormalized],")")), Annotate($gran, "myRule", "Rule$loquequedaGRAN")),
  stage : 1000  }
  
  
  { ruleType:   "tokens",
  pattern: ( [{myRule:"Rule$loquequeda"}]+ ),
result: ("DURATION", $0[0].timexValue, "", "","Rule$loquequeda"),
  stage : 1001  }

  
  
  { ruleType:   "composite",
  pattern: ( (?$timepart [{timexType:"TIME"}]+) [{lemma:/,/}]? [{lemma:/of/}]? [{lemma:/the/}]? [{lemma:/day/}]?  (?$datepart [{timexType:"DATE"}]+) ),
result: ("TIME", Concat($datepart[0].timexValue, "T", $timepart[0].timexValue), "", "","Rule$TIMEdelDATE"),
  stage : 1002  }





  

  
#  { ruleType:   "tokens",
#  pattern: ( [{myRule:"Rule$loquequedaGRAN"}]+ ),
#result: ("DATE", $0[0].timexValue, "", "","Rule$loquequedaGRAN"),
#  stage : 1001  }
  
  
    { ruleType:   "tokens",
  pattern: ( [{word:/[C|c]hristmas/}] ),
result: ("DATE", "XXXX-12-25", "", "","Rule$Navidad"),
  stage : 1001  }
  
    { ruleType:   "tokens",
  pattern: ( [{word:/[C|c]hristmas/}] [{word:/[E|e]ve/}] ),
result: ("DATE", "XXXX-12-31", "", "","Rule$Navidad"),
  stage : 1001  }
 
  
    { ruleType:   "tokens",
  pattern: ( [{word:/New/}] [{word:/Year/}] ),
result: ("DATE", "XXXX-01-01", "", "","Rule$AñoNuevo"),
  stage : 1001  }
  
  
  { ruleType:   "tokens",
  pattern: ( [{word:/[H|h]alloween/}] ),
result: ("DATE", "XXXX-10-31", "", "","Rule$Halloween"),
  stage : 1001  }
  
  
  
  { ruleType:   "composite",
  pattern: ( ([{timexType:"DATE"}]+) [{lemma:/of/}] [{lemma:/the/}]? ([{timexType:"DATE"}]+) ),
result: ("DATE", Concat($2[0].timexValue,"-", $1[0].timexValue), "", "","Rule$DatedeDate"),
  stage : 1001  }
  
  
  
#
						  


